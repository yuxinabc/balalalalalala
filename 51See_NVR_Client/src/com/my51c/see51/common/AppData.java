//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : AppData.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.common;

import android.app.Activity;
import android.app.Application;
import android.os.Environment;
import android.util.Log;

import com.my51c.see51.data.AccountInfo;
import com.my51c.see51.data.Device;
import com.my51c.see51.data.DeviceList;
import com.my51c.see51.data.Group;
import com.my51c.see51.data.SelectionDevice;
import com.my51c.see51.media.RemoteInteractionStreamer;
import com.my51c.see51.service.GVAPService;
import com.my51c.see51.service.GvapEvent.GvapEventListener;
import com.my51c.see51.service.LocalService;
import com.my51see.see51.R;

import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class AppData extends Application
{
	private AccountInfo userAccount;
	private DeviceList pubList;
	private Map<String, DeviceList> mapGroPublist;
	private DeviceList localList;
	static private String wokringPath;

	private GVAPService gvapService;
	private LocalService localService;
	
	private GvapEventListener mainActivity;
	private boolean reLogin = false;
	private RemoteInteractionStreamer gRemoteStreamer;
	private List<SelectionDevice> m_selectdevice;

	public List<SelectionDevice> getM_selectdevice() {
		return m_selectdevice;
	}

	public void setM_selectdevice(List<SelectionDevice> m_selectdevice) {
		this.m_selectdevice = m_selectdevice;
	}

	@Override
	public void onCreate()
	{
		super.onCreate();
		// ��ʼ������
		userAccount = new AccountInfo("guest", "guest");
		pubList = new DeviceList();
		localList = new DeviceList();
		gvapService = new GVAPService();
		localService = new LocalService();
		mapGroPublist = Collections.synchronizedMap(new HashMap<String, DeviceList>());

		String sDStateString = Environment.getExternalStorageState();
		if (sDStateString.equals(Environment.MEDIA_MOUNTED))
		{
			// ��ȡ��չ�洢�豸���ļ�Ŀ¼
			File SDFile = Environment.getExternalStorageDirectory();
			wokringPath = (SDFile.getAbsolutePath() + File.separator + getResources().getString(R.string.app_name) + File.separator);
		}
		
		Log.d("AppData", "onCreate!");
	}
	
	public void createGVAPService()
	{
		gvapService = new GVAPService();
	}
	
	public void setNetStatus(boolean bNet)
	{	
		if(gvapService != null)
		{
			gvapService.bNetStatus = bNet;
		}
	}
	
	public boolean getNetStatus()
	{	
		if(gvapService != null)
		{
			return gvapService.bNetStatus;
		}
		
		return false;
	}

	public boolean init()
	{

		// ��������
		localService.init(localList, this);
		gvapService.init();
		gvapService.start();
		m_selectdevice = new ArrayList<SelectionDevice>();
		return true;
	}

	public boolean initLocalService()
	{
		localList = new DeviceList();
		localService.init(localList, this);
		return false;
	}
	
	public boolean addSelectionDev(SelectionDevice indev)
	{	
		boolean bSucc = false;
		boolean bFound = false;
		SelectionDevice dev = null;
		int i = 0;
		for(i=0; i < m_selectdevice.size(); i++)
		{
			dev = m_selectdevice.get(i);
			if(indev.getDeviceid().equals(dev.getDeviceid()) && indev.isLocal() == dev.isLocal())
			{
				bFound = true;
				break;
			}
		}
		
		if(bFound)
		{
			m_selectdevice.remove(i);
			m_selectdevice.add(indev);
			bSucc = true;
		}
		else
		{
			if(m_selectdevice.size() < 4)
			{
				m_selectdevice.add(indev);
				bSucc = true;
			}	
		}
		
		return bSucc;
	}
	
	public boolean removeSelectDev(SelectionDevice indev)
	{
		boolean bSucc = false;
		boolean bFound = false;
		SelectionDevice dev = null;
		
		int i = 0;
		for(i=0; i < m_selectdevice.size(); i++)
		{
			dev = m_selectdevice.get(i);
			if(indev.getDeviceid().equals(dev.getDeviceid()) && indev.isLocal() == dev.isLocal())
			{
				bFound = true;
				break;
			}
		}
		
		if(bFound)
		{
			m_selectdevice.remove(i);
			bSucc = true;
		}
			
		return bSucc;
	}
	
	public void clearSelectDev()
	{
		if(m_selectdevice != null)
		{
			m_selectdevice.clear();
		}
	}
	
	//ˢ�±����б�ʱ������ѡ�е��豸(m_selectdevice)
	public void checkLocalDeviceList()
	{
		int i = 0;
		SelectionDevice seldev = null;
		for(i=0; i < m_selectdevice.size(); i++)
		{
			seldev = m_selectdevice.get(i);
			boolean bfound = false;
			Device mkeepdev = null;
			synchronized (localList) {
				
				for (Device dev : localList)
				{
					mkeepdev = dev;
					if(seldev.isLocal() && seldev.getDeviceid().equals(dev.getID()))
					{
						bfound = true; 
						break;
					}
				}
			
			}
			
			if(seldev.isLocal() && bfound == false)
			{
				if(mkeepdev != null)
				mkeepdev.setbLocalSelected(false);
				removeSelectDev(seldev);
			}
			
		}
	}
	
	
	public void release()
	{
		localService.release();
		gvapService.release();
		m_selectdevice.clear();
		m_selectdevice = null;
	}

	public DeviceList getPublicList()
	{
		return pubList;
	}

	public DeviceList getLocalList()
	{
		return localList;
	}

	public GVAPService getGVAPService()
	{
		return gvapService;
	}

	public AccountInfo getAccountInfo()
	{
		return userAccount;
	}

	static public String getWokringPath()
	{
		return wokringPath;
	}

	public void setAccountInfo(AccountInfo account)
	{
		this.userAccount = account;
	}

	public LocalService getLocalService()
	{
		return localService;
		// if (localService.isInit()){
		// return localService;
		// }else{
		// return null;
		// }
	}

	private List<WeakReference<Activity>> guideActivityList = new LinkedList<WeakReference<Activity>>();

	public void addActivity(WeakReference<Activity> activity)
	{
		guideActivityList.add(activity);
	}

	// ��������Activity��finish
	public void exit()
	{
		for (WeakReference<Activity> activity : guideActivityList)
		{
			Activity temp = activity.get();
			 if(temp != null)
			 {
				 temp.finish();
			 }
		}
	}
	
	private List<WeakReference<Activity>> ActivityUIList = new LinkedList<WeakReference<Activity>>();

	public void addUIActivity(WeakReference<Activity> activity)
	{
		ActivityUIList.add(activity);
	}

	// ��������Activity��finish
	public void exitUI()
	{
		for (WeakReference<Activity> activity : ActivityUIList)
		{
			 Activity temp = activity.get();
			 if(temp != null)
			 {
				 temp.finish();
			 }
		}
	}


	/**
	 * @return the mainActivity
	 */
	public GvapEventListener getMainActivity()
	{
		return mainActivity;
	}

	/**
	 * @param mainActivity
	 *            the mainActivity to set
	 */
	public void setMainActivity(GvapEventListener mainActivity)
	{
		this.mainActivity = mainActivity;
	}

	/**
	 * @return the reLogin
	 */
	public boolean isReLogin()
	{
		return reLogin;
	}

	/**
	 * @param reLogin
	 *            the reLogin to set
	 */
	public void setReLogin(boolean reLogin)
	{
		this.reLogin = reLogin;
	}

	/**
	 * ��ӹ������б�
	 * 
	 * @param groupId
	 *            ���ID
	 */
	public void addPubList(Group parent_group, String grandParent_group)
	{
		if (!mapGroPublist.containsKey(parent_group))
		{
			DeviceList devList = new DeviceList();
			devList.setParent_group(parent_group);
			String groupId = parent_group.getGroupID();
			if (grandParent_group != null)
			{
				devList.setGrandParent_group(grandParent_group);
			}
			synchronized (this)
			{
				mapGroPublist.put(groupId, devList);
			}
		}

	}

	/**
	 * ��ȡ�����˻��µ����е��б�
	 * 
	 * @param groupId
	 *            ���ID
	 * @return �豸�б�
	 */
	public DeviceList getDevList(String groupId)
	{
		DeviceList devList = this.mapGroPublist.get(groupId);
		if (devList != null)
			return devList;
		return null;
	}
	
	public RemoteInteractionStreamer getRemoteInteractionStreamer()
	{
		return gRemoteStreamer;
	}
	
	public void setRemoteInteractionStreamer(RemoteInteractionStreamer l)
	{
		gRemoteStreamer = l;
	}
}
