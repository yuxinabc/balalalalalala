//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : Device.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//



package com.my51c.see51.data;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

import com.my51c.see51.common.AppData;
import com.my51c.see51.protocal.RFPackage;
import com.my51see.see51.R;

import java.io.File;
import java.net.InetSocketAddress;
import java.net.SocketAddress;

/**
 * ����ͷ�豸��
 * @author guo
 *
 */
public class Device {
	
	private Device3GInfo local3GInfo;
	private DeviceLocalInfo localInfo;
	private DeviceSee51Info see51Info;
	// �豸���ͳ��㲥��IP, ���豸�㲥������IP��������ʱ�������䷢�͹㲥��IP
	private RFPackage		rfInfo;
	private Device3GShortParam dev3gInfo;
	private String			playIP;
	private Object			snapImage;
	
	private boolean bRemoteSelected = false;
	public boolean isbRemoteSelected() {
		return bRemoteSelected;
	}
	public void setbRemoteSelected(boolean bRemoteSelected) {
		this.bRemoteSelected = bRemoteSelected;
	}
	
	private boolean bLocalSelected = false;
	public boolean isbLocalSelected() {
		return bLocalSelected;
	}
	public void setbLocalSelected(boolean bLocalSelected) {
		this.bLocalSelected = bLocalSelected;
	}
	
	
	/*
	private boolean bSelected = false;
	
	public boolean isbSelected() {
		return bSelected;
	}
	
	public void setbSelected(boolean bSelected) {
		this.bSelected = bSelected;
	}
	
	public void resvrseSelection()
	{
		this.bSelected = ! this.bSelected;
	}
	*/
	
	final int DEV_TYPE_LAN = 1;
	
	/**
	 *  ��ȡ�豸ID
	 * @return �豸ID
	 */
	public String getID()
	{
		String szRet = null;
		if(localInfo != null)
			szRet = localInfo.getCamSerial();
		else if(see51Info != null)
		{
			szRet = see51Info.getDiviceID();
		}
		return szRet;
	}
	/**
	 *  ��ȡ���ŵ�ַ
	 * @return �豸��Ƶ���ŵ�ַ
	 */
	public String getPlayURL()
	{
		String szRet = null;
		// TODO ����������Ϊ���ŵ�ַ
		if(see51Info != null && see51Info.getStatus() == 2)
		{
			szRet = see51Info.getDataURL();
		}
		else if(localInfo != null) 
		{
			szRet = this.getPlayIP();
		}
		
		return szRet;
	}
	/**
	 * �����豸����״̬
	 * @param status ����״̬
	 * @param param ����״̬����(�豸url)
	 */
	public void setDevStatus(int status, String param) {
		if(this.see51Info != null)
		{
			this.see51Info.setStatus(status);
			this.see51Info.setDataURL(param);			
		}
	}
	/**
	 * ��ȡ�豸��������Ϣ
	 * @return ����豸�ھ��������򷵻ؾ�������Ϣ�����򣬷���null
	 */
	public DeviceLocalInfo getLocalInfo() {
		return localInfo;
	}
	
	public void setLocalInfo(DeviceLocalInfo localInfo){
		this.localInfo = localInfo;
	}
	
	public RFPackage getRFInfo()
	{
		return rfInfo;
	}
	
	public void setRFInfo(RFPackage info)
	{
		this.rfInfo = info;
	}
	
	public Device3GShortParam get3GParam()
	{
		return dev3gInfo;
	}
	public void set3GParam(Device3GShortParam info)
	{
		dev3gInfo = info;
	}
	
	public Device3GInfo getLocal3GInfo(){
		return local3GInfo;
	}
	
	public void setLocal3GInfo(Device3GInfo local3GInfo, SocketAddress addr){
		this.local3GInfo = local3GInfo;
		
		
		String szRemouteIP = ((InetSocketAddress)addr).getAddress().getHostAddress();
		
		if(this.localInfo != null)
		{
			if(this.localInfo.getDeviceIP().equals(szRemouteIP) ||
					this.localInfo.getWiFiIP().equals(szRemouteIP)) // ��ʵ�ʷ�����Ϣ��IP��ַΪ׼
			{
				playIP = szRemouteIP;
				//playIP = szRemouteIP.replaceAll(regexString, "$1");
			}
			else if(szRemouteIP.equals("192.168.100.100"))
			{
				playIP = szRemouteIP; // apģʽ
				//playIP = szRemouteIP.replaceAll(regexString, "$1");
			}
			else
			{
				//playIP = ""; // ʵ�ʵ�ַ���豸�����ĵ�ַ�����������Ϊ�޷���ͨ
				//playIP = this.localInfo.getDeviceIP();//ʵ�ʵ�ַ���豸�����ĵ�ַ���������ʹ�����ߵ�ip��ַ
				String regexString=".*(\\d{3}(\\.\\d{1,3}){3}).*";
				playIP = this.localInfo.getDeviceIP().replaceAll(regexString, "$1");//������ʱ���յ������ip��ַ
			}
		}
	}
	
	public void setLocalInfo(DeviceLocalInfo localInfo, SocketAddress addr) {
		//Log.d("Device", "setLocalInfo " + localInfo.getCamSerial());
		this.localInfo = localInfo;
		String szRemouteIP = ((InetSocketAddress)addr).getAddress().getHostAddress();
		//Log.d("Device", "Remote:" + szRemouteIP 
		//		+ " Lan:" + localInfo.getDeviceIP() 
		//		+ " Wifi:" +localInfo.getWiFiIP());
		
		if(this.localInfo.getDeviceIP().equals(szRemouteIP) ||
				this.localInfo.getWiFiIP().equals(szRemouteIP)) // ��ʵ�ʷ�����Ϣ��IP��ַΪ׼
		{
			playIP = szRemouteIP;
			//playIP = szRemouteIP.replaceAll(regexString, "$1");
		}
		else if(szRemouteIP.equals("192.168.100.100"))
		{
			playIP = szRemouteIP; // apģʽ
			//playIP = szRemouteIP.replaceAll(regexString, "$1");
		}
		else
		{
			//playIP = ""; // ʵ�ʵ�ַ���豸�����ĵ�ַ�����������Ϊ�޷���ͨ
			//playIP = this.localInfo.getDeviceIP();//ʵ�ʵ�ַ���豸�����ĵ�ַ���������ʹ�����ߵ�ip��ַ
			String regexString=".*(\\d{3}(\\.\\d{1,3}){3}).*";
			playIP = this.localInfo.getDeviceIP().replaceAll(regexString, "$1");//������ʱ���յ������ip��ַ
		}
	}

	/**
	 * ��ȡ�豸see51��Ϣ
	 * @return �豸see51��Ϣ�� ������ʱ����null
	 */
	public DeviceSee51Info getSee51Info() {
		return see51Info;
	}
	/**
	 * �����豸��see51��Ϣ
	 * @param see51Info see51��Ϣ
	 */
	public void setSee51Info(DeviceSee51Info see51Info) {
		this.see51Info = see51Info;
	}
	private String getPlayIP() {
		return playIP;
	}
	
	public Object getSnapImage() {
//		if(snapImage == null)
//		{
			loadSnapImage();
//		}
		return snapImage;
	}
	public void loadSnapImage() {
		
		String snapsPath = AppData.getWokringPath() + "snapshot" + File.separator;
		Object image =  R.drawable.cam_default_icon;
		if(snapsPath!= null && snapsPath.length() > 0)
   	 	{				    	
	        // ͨ�����bitmap��ȡͼƬ�Ŀ�͸�   
			String szDeviceId = "";
			if(this.localInfo != null)
				szDeviceId = localInfo.getCamSerial();
			else if(see51Info != null)
			{
				szDeviceId = see51Info.getDiviceID();
			}
			
	    	 String filename = snapsPath + szDeviceId + ".jpg";
	    	 File file = new File(filename);
	    	 try {
				if(file.exists())
				 {
					 BitmapFactory.Options options = new BitmapFactory.Options();  
					 options.inPreferredConfig = Bitmap.Config.RGB_565;
					 options.inPurgeable = true;
					 options.inInputShareable = true;
					 options.inSampleSize = 8;
					 Bitmap bitmap = BitmapFactory.decodeFile(filename, options);  
					 if (bitmap != null)  
					 {  
						 image = bitmap;
					 }
				 }
			} catch (OutOfMemoryError e) {
				// TODO Auto-generated catch block
				image = R.drawable.cam_default_icon;
				e.printStackTrace();
			}
   	 	}	
		this.snapImage = image;
	}
}
