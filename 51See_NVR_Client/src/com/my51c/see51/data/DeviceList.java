//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : DeviceList.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.data;

import com.my51c.see51.listener.DeviceListListener;

import java.net.SocketAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * �豸�б���
 * 
 * @author guo
 * 
 */
public class DeviceList implements Iterable<Device>
{
	private ArrayList<DeviceListListener> listListener;
	private Map<String, Device> devices;
	private Map<String, Group> groups;
	/**�б������ID,Ĭ��Ϊnull�������Ǹ����� */
	private Group parent_group = null; // �б������ID��Ĭ��Ϊnull�������Ǹ�����
	private String grandParent_group = null; // �б�ү�����ID��Ĭ��Ϊnull�������Ǹ�����
	private int version;
	private int server_version;

	/**
	 * ���캯��
	 */
	public DeviceList()
	{
		listListener = new ArrayList<DeviceListListener>();
		// devices = ;
		// ʹ��ͬ����map
		devices = Collections.synchronizedMap(new HashMap<String, Device>());
		groups = Collections.synchronizedMap(new HashMap<String, Group>());
		this.server_version = 0;
	}

	/**
	 * ����豸�б�ı��¼���������
	 * 
	 * @param o
	 *            �б�ı��¼���������
	 */
	public void addListListener(DeviceListListener o)
	{

		//Log.d("DeviceList", "addListListener");
		synchronized (listListener)
		{
			if (o != null && !listListener.contains(o))
				listListener.add(o);
		}
	}

	/**
	 * ע���б�ñ�����¼���������
	 * 
	 * @param o
	 *            �б�ñ�����¼���������
	 */
	public void removeListener(DeviceListListener o)
	{
		synchronized (listListener)
		{
			listListener.remove(o);
		}
	}

	/**
	 * �豸�б�ı�
	 */
	public void listUpdated()
	{
		//Log.d("DeviceList", "listUpdated ");
		synchronized (listListener)
		{
			for (DeviceListListener observer : listListener)
			{
				observer.onListUpdate();
			}
		}
	}

	/**
	 * 
	 * @param devInfo
	 * @param Addr
	 * @����SocketAddress���͹㲥������豸
	 */
	public void onReceivedMessage(DeviceLocalInfo devInfo, SocketAddress Addr, boolean is3GDevice)
	{
		String devId = devInfo.getCamSerial();
		//Log.d("DeviceList", "onReceivedMessage " + devId);
		Device dev = devices.get(devId);
		if (dev == null) // ���豸
		{
			dev = new Device();
			add(devId, dev);
		}
		// �������յ��Ĺ㲥Ϊ׼
		if(is3GDevice){
			dev.setLocal3GInfo(new Device3GInfo(devInfo.toByteBuffer()), Addr);
		}
		
		dev.setLocalInfo(devInfo, Addr);
		listUpdated();
	}
	
	public void onReceivedMessage(DeviceLocalInfo devInfo, SocketAddress Addr, boolean is3GDevice, boolean bSelection)
	{
		String devId = devInfo.getCamSerial();
		//Log.d("DeviceList", "onReceivedMessage " + devId);
		Device dev = devices.get(devId);
		if (dev == null) // ���豸
		{
			dev = new Device();
			add(devId, dev);
		}
		// �������յ��Ĺ㲥Ϊ׼
		if(is3GDevice){
			dev.setLocal3GInfo(new Device3GInfo(devInfo.toByteBuffer()), Addr);
		}
		
		dev.setbLocalSelected(bSelection);
		dev.setLocalInfo(devInfo, Addr);
		listUpdated();
	}

	/**
	 * ��ȡ�豸����
	 * 
	 * @param deviceId
	 *            �豸ID
	 * @return �豸����
	 */
	public Device getDevice(String deviceId)
	{
		return this.devices.get(deviceId);
	}

	/**
	 * ��ȡ�����
	 * 
	 * @param groupId
	 *            ��ID
	 * @return �����
	 */
	public Group getGroup(String groupId)
	{
		return this.groups.get(groupId);
	}

	/**
	 * ����豸�б�
	 */
	public void clear()
	{
		synchronized (this)
		{
			this.devices.clear();
			this.groups.clear();
		}
		this.version = 0;
		listUpdated();
	}

	/**
	 * ��ȡ�豸�б�汾��
	 * 
	 * @return �豸�б�汾��
	 */
	public int getVersion()
	{
		return version;
	}

	/**
	 * �����豸�б�汾��
	 * 
	 * @param version
	 *            �豸�б�汾��
	 */
	public void setVersion(int version)
	{
		this.version = version;
	}

	/**
	 * ������豸
	 * 
	 * @param info
	 */
	public void addBySee51Info(DeviceSee51Info info)
	{

		String devId = info.getDiviceID();
		//Log.d("DeviceList", "onSee51DeviceInfo: " + devId);
		Device dev = devices.get(devId);
		if (dev == null) // ���豸
		{
			dev = new Device();
			add(devId, dev);
		}
		dev.setSee51Info(info);
		// �������յ��Ĺ㲥Ϊ׼
		listUpdated();
	}
	
	public void addBySee51Info(DeviceSee51Info info, boolean bSelection)
	{

		String devId = info.getDiviceID();
		//Log.d("DeviceList", "onSee51DeviceInfo: " + devId);
		Device dev = devices.get(devId);
		if (dev == null) // ���豸
		{
			dev = new Device();
			add(devId, dev);
		}
		dev.setSee51Info(info);
		dev.setbRemoteSelected(bSelection);
		// �������յ��Ĺ㲥Ϊ׼
		listUpdated();
	}

	/**
	 * �������
	 * 
	 * @param info
	 */
	public void addGroup(Group group)
	{
		String groId = group.getGroupID();
		Group gro = groups.get(groId);
		if (gro == null) // ���豸
		{
			gro = new Group(groId);
			addGroups(groId, gro);
		}
		// �������յ��Ĺ㲥Ϊ׼
		listUpdated();
	}

	public Group getParent_group()
	{
		return parent_group;
	}

	public void setParent_group(Group parent_group)
	{
		this.parent_group = parent_group;
	}

	public String getGrandParent_group()
	{
		return grandParent_group;
	}

	public void setGrandParent_group(String grandParent_group)
	{
		this.grandParent_group = grandParent_group;
	}

	public int getServerVersion()
	{
		return server_version;
	}

	public void setServeVersion(int server_version)
	{
		this.server_version = server_version;
	}

	public void updateSuccess()
	{
		this.version = this.server_version;
	}

	/**
	 * ���б�������豸
	 * 
	 * @param devId
	 * @param dev
	 */
	public void add(String devId, Device dev)
	{
		synchronized (this)
		{
			devices.put(devId, dev);
		}
	}

	/**
	 * ���б��������
	 * 
	 * @param groId
	 * @param gro
	 */
	public void addGroups(String groId, Group gro)
	{
		synchronized (this)
		{
			groups.put(groId, gro);
		}
	}

	/**
	 * ��ȡ�豸����
	 * 
	 * @return �豸����
	 */
	public int getDeviceCount()
	{
		return this.devices.size();
	}

	/**
	 * ��ȡ������
	 * 
	 * @return ������
	 */
	public int getGroupCount()
	{
		return this.groups.size();
	}

	/**
	 * �б��α�
	 */
	@Override
	public Iterator<Device> iterator()
	{
		return new DeviceIterator();
	}

	private class DeviceIterator implements Iterator<Device>
	{

		private Iterator<Map.Entry<String, Device>> iterator;

		public DeviceIterator()
		{
			this.iterator = devices.entrySet().iterator();
		}

		// �ж��Ƿ�����һ��Ԫ�أ�������������һ��Ԫ�ؾͷ���false
		public boolean hasNext()
		{
			return iterator.hasNext();
		}

		// ���ص�ǰԪ�����ݣ��������±�
		public Device next()
		{
			Map.Entry<String, Device> entry;
			entry = (Map.Entry<String, Device>) iterator.next();
			return (Device) entry.getValue();

		}

		// ���ﲻ֧�֣��׳���֧�ֲ����쳣
		public void remove()
		{
			throw new UnsupportedOperationException();
		}
	}

	/**
	 * ���б��α�
	 */
	public Iterator<Group> getIteratorGroup()
	{
		return new GroupIterator();
	}

	private class GroupIterator implements Iterator<Group>
	{

		private Iterator<Map.Entry<String, Group>> iterator;

		public GroupIterator()
		{
			this.iterator = groups.entrySet().iterator();
		}

		// �ж��Ƿ�����һ��Ԫ�أ�������������һ��Ԫ�ؾͷ���false
		public boolean hasNext()
		{
			return iterator.hasNext();
		}

		// ���ص�ǰԪ�����ݣ��������±�
		public Group next()
		{
			Map.Entry<String, Group> entry = (Map.Entry<String, Group>) iterator.next();
			return (Group) entry.getValue();
		}

		// ���ﲻ֧�֣��׳���֧�ֲ����쳣
		public void remove()
		{
			throw new UnsupportedOperationException();
		}
	}
}
