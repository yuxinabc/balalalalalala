//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : DeviceLocalInfo.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.data;

import com.my51c.see51.protocal.Utils;

import java.nio.ByteBuffer;

/**
 * �豸��������Ϣ��
 * 
 * @author guo
 * 
 */
public class DeviceLocalInfo implements Cloneable
{
	private int nCmd; // ��ʶ������
	private byte szPacketFlag[]; // ��ʶ�ַ�
	private byte szDeviceName[]; // �豸����
	private byte szDeviceType[]; // �豸����
	private int nMaxChannel; // ���ͨ����
	private byte szDeviceIP[]; // �豸IP
	private byte szDeviceMasK[]; // �豸��������
	private byte szDeviceGateWay[]; // �豸����
	private byte szMultiAddr[]; // �豸�ಥ��ַ
//	private byte szMacAddr[]; // �豸MAC ��ַ
	private byte szMacAddr_LAN[]; // �豸MAC ��ַ
	private byte szMacAddr_WIFI[]; // �豸MAC ��ַ
	private int nEnableDeviceDHCP; // �豸DHCP
	private byte szRevsered0[]; // reserved0
	private byte szDNS0[]; // �豸DNS��ַ
	private byte szDNS1[]; // DNS��ַ��û��
	private int nMultiPort; // �ಥ�˿�
	private int nDataPort; // ���ݶ˿�
	private int nWebServerPort; // WEB �˿�

	private byte szUserName[]; // �û���
	private byte szPwd[]; // ����
	private byte szCameraVer[]; // ����汾

	private byte szWanServerIP[]; // ������IP
	private byte szServerPort[]; // �������˿�
	private byte szCamSerial[]; // �豸���к�
	private byte szTutkID[];	//TutkID
	private int nSdTotal;
	private int nSdFree;
	private byte nBattery;
	private byte szRevsered1[];
	
	private int nEnableWiFiDHCP; // �Ƿ�����WiFi��DHCP
	private int nEnableWiFi; // �Ƿ�����WiFi
	private int nWiFiEncryMode; // WiFi����ģʽ
	private byte szWiFiIP[]; // WiFi��IP
	private byte szWiFiSSID[]; // WiFi����
	private byte szWiFiPwd[]; // WiFi����

	private byte szWiFiMasK[]; // WiFi����������
	private byte szWiFiGateWay[]; // WiFi������
	private byte szWiFiDNS0[]; // WiFi��DNS��ַ
	private byte szWiFiDNS1[]; //

	/*
	 * //char* pVideoSize[] = { bit 0 1 2 3 4 5 "H264:720P", "H264:D1",
	 * "H264:VGA", "H264:DCIF", "H264:CIF", "H264:QVGA", bit 6 7 8
	 * "H264:720P,H264:VGA", "H264:720P,H264:QVGA(320*240)",
	 * "H264:720P,H264:CIF(352*288)", bit 9 10 11 12
	 * "H264:D1(704*576),H264:DCIF", "H264:D1,H264:CIF", "H264:VGA,H264:QVGA",
	 * "H264:CIF,H264:QVGA" };
	 */
	private int uOfferSize; // �ṩ����Ƶ�ֱ���
	private int uImageSize; // ��ǰ��Ƶ�ֱ���
	private int uMirror; // ��Ƶ����
	private int uFlip; // ��Ƶ��ת
	private int uRequestStream;//
	private int uBitrate1; // ������
	private short uFramerate1Val; // ֡��ֵ
	private short uFramerate1; // ֡��
	// �ڶ�·����
	private int uBitrate2; // ������
	private short uFramerate2Val; // ֡��ֵ
	private short uFramerate2; // ֡��

	private int uImagesource; // �ֱ���(NTSC/PAL) 0:NTSC, 1:PAL
	private int uChangePWD; // 1: need to change 0: not to change
	private byte szNewPwd[]; // the new password
	private int nDeviceNICType; // 0 wired NIC;1 wifi NIC
	private int uEnableAudio; // �Ƿ�����Ƶ

	//private byte szRevsered1[];
	private byte bgioinenable;	 ///< GIO input enable
	private byte bgiointype;	 ///< GIO input type
	private byte bgiooutenable;	 ///< GIO output enable
	private byte bgioouttype;	 ///< GIO output type
	private byte bAlarmEnable;	 ///alarm enable or disable
	private byte cRs485baudrate; ///0-9600 1-4800 2-2400  3-1200, 4-disable-gpio 5-disable-rs232
	private short uSnapInterval;	 ///from 1minute to 24hour=24*60, 0--disable, 2014-01-26
	private byte nAudioEncoderType; ///0--G711 1--aac 2--adpcm 3--pcm
	private byte uCloudSaveType; ///0--none,  1--sd, 2--cloud, server 3- all
	private byte uCloudSaveStream; ///0--big 1--small
	private short uCloudSaveTime; ///0--5, n>1--10second*n
	///////rate control, if you don't know how to use it, please don't touch these paras...
	private byte nRateControl1;//0--auto 1--vbr 2--cbr
	private byte nRateControl2;//0--auto 1--vbr 2--cbr
	private byte nQPMax1;
	private byte nQPMin1;
	private byte nQPMax2;
	private byte nQPMin2;
	private byte nIPRatio1;//
	private byte nIPRatio2;
	///////rate control end
	//////OSD, 20140513
	private byte bOSDTimeStampEnable1;
	private byte bOSDDateStampEnable1;
	private byte bOSDTimeStampEnable2;
	private byte bOSDDateStampEnable2;
	//////RTSP on, 20140702
	private byte bRTST_On;
	//////bright contrast  and saturation
	private byte uBrightness;
	private byte uContrast;
	private byte uSaturation;
	////ir light
	private byte nIRLightControlMethod;//0-auto, 1-on, 2-off
	private byte bFormatSD;//1-format sd
	//////
	private byte njpegquality;//mjpeg encoder qulity, add by marshal 20150418
	private int snaptime1; //snap time1 in second
	private int snaptime2; //snap time2 in second
	private byte videoEncType;//low4 bit for ch1, high 4bit for ch2, eg. 0x00 --h264, 0x01--ch1--h265 ch2--h264, 0x11--h265
	private byte videoSizeCh1;//--0 1080p, 1-720p ,2-vga, 3-qvga, 4-960p, 5-3M, 6-4M 7-5M
	private byte videoSizeCh2;
	private byte szRevsered2[];
	//end
	
	private byte nAlarmAudioPlay; // /< alarm audio play enable/disable
	private byte nAlarmDuration; // /< alarm duration 0~5{10, 30, 60, 300, 600,
									// NON_STOP_TIME}
	private byte bAlarmUploadFTP; // /< ����¼����ļ��ϴ���ftp
	private byte bAlarmSaveToSD; // /< ����¼����ļ����浽sd��
	private byte bSetFTPSMTP; // /< Ϊ1��ʾ����FTP������Ϊ2��ʾ����SMTP����
	private byte servier_ip[]; // /< FTP or SMTP server address
	private byte username[]; // /< FTP or SMTP login username
    private byte password[]; // /< FTP or SMTP login password  
	private int uPort; // /< FTP or SMTP

	// GVAP/
	private byte szBindAccont[]; // ���û���
	private byte szDevSAddr[]; // �豸��������ַ������
	private int uDevSPort; // �豸�������˿�

	private byte szSMTPReceiver[]; // �����ʼ�����
	private byte motionenable; // /< motion detection enable
	private byte motioncenable; // /< customized sensitivity enable
	private byte motionlevel; // /< predefined sensitivity level
	private byte motioncvalue; // /< customized sensitivity value
	private byte motionblock[]; // /< motion detection block data
	private byte bDeviceRest; // / �豸��λ����Ϊ1��ʾ��λ��Ϊ2��ʾ�����豸
	private byte bEnableEmailRcv; // / ���������ʼ��Ľ���
	private byte bAttachmentType; // / �����ʼ����������� 0->avi 1->jpeg 2->��������
	//
	private byte ntp_timezone; // / ����ϵͳʱ����0-23 ��ϸ���忴�����ע�ͣ�
								// ���λ����������������ʱ��Ĭ���Զ���������ʱ
	private int nYear; // /< ��ǰ���.
	private byte nMon; // /< Mounth from 1 to 12. �޸�ʱ��ʱ���Ƚ��·ݸ�ֵ�ã�
						// �ٽ��·����λ����Ϊ1(nMon|0x80)
	private byte nDay; // /< Second from 1 to 31.
	private byte nHour; // /< Hour from 0 to 23.
	private byte nMin; // /< Minute from 0 to 59.
	private byte nSec; // /< Second from 0 to 59.

	private byte nSdinsert; // /< SD card inserted��ֵΪ3��ʾsd��������ʹ��
	private byte bSchedulesUploadFTP; // /< Schedule¼����ļ��ϴ���ftp
	private byte bSchedulesSaveToSD; // /< Schedule¼���ļ����浽sd�������λΪ1��ʾ¼�񸲸�

	private Schedule aSchedules[]; // /< schedule data

	// private byte szRevsered2[];

	public DeviceLocalInfo()
	{
		szPacketFlag = new byte[24]; // ��ʶ�ַ�
		szDeviceName = new byte[20]; // �豸����
		szDeviceType = new byte[24]; // �豸����
		szDeviceIP = new byte[16]; // �豸IP
		szDeviceMasK = new byte[16]; // �豸��������
		szDeviceGateWay = new byte[16]; // �豸����
		szMultiAddr = new byte[16]; // �豸�ಥ��ַ
		szMacAddr_LAN = new byte[8]; // �豸MAC ��ַ
		szMacAddr_WIFI = new byte[8]; // �豸MAC ��ַ	
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // �豸DHCP
		szRevsered0 =  new byte[12]; // 
		szDNS0 = new byte[16]; // �豸DNS��ַ
		szDNS1 = new byte[16]; // DNS��ַ��û��
		szUserName = new byte[16]; // �û���
		szPwd = new byte[16]; // ����
		szCameraVer = new byte[8]; // ����汾
		szWanServerIP = new byte[28]; // ������IP
		szServerPort = new byte[4]; // �������˿�
		szCamSerial = new byte[24]; // �豸���к�
		szTutkID = new byte[24];
		szRevsered1 = new byte[16];
		
		szWiFiIP = new byte[20]; // WiFi��IP
		szWiFiSSID = new byte[128]; // WiFi����
		szWiFiPwd = new byte[68]; // WiFi����
		szWiFiMasK = new byte[16]; // WiFi����������
		szWiFiGateWay = new byte[16]; // WiFi������
		szWiFiDNS0 = new byte[16]; // WiFi��DNS��ַ
		szWiFiDNS1 = new byte[16]; //
		szNewPwd = new byte[16]; // the new password
		
		szRevsered2 = new byte[16];

		setServier_ip(new byte[37]);
		setUsername(new byte[16]);
		setPassword(new byte[16]);
		szBindAccont = new byte[48]; // ���û���
		szDevSAddr = new byte[48];
		setSzSMTPReceiver(new byte[64]);
		motionblock = new byte[4];
		aSchedules = new Schedule[8];
		for (int i = 0; i < 8; i++)
		{
			aSchedules[i] = new Schedule();
		}
		// szRevsered2 = new byte[204];
	}

	public DeviceLocalInfo(ByteBuffer byteBuf)
	{
		szPacketFlag = new byte[24]; // ��ʶ�ַ�
		szDeviceName = new byte[20]; // �豸����
		szDeviceType = new byte[24]; // �豸����
		szDeviceIP = new byte[16]; // �豸IP
		szDeviceMasK = new byte[16]; // �豸��������
		szDeviceGateWay = new byte[16]; // �豸����
		szMultiAddr = new byte[16]; // �豸�ಥ��ַ
//by marshal
//		szMacAddr = new byte[32]; // �豸MAC ��ַ
		szMacAddr_LAN = new byte[8]; // �豸MAC ��ַ		
		szMacAddr_WIFI = new byte[8]; // �豸MAC ��ַ	
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // �豸DHCP
		szRevsered0 =  new byte[12]; // 
///end		
		szDNS0 = new byte[16]; // �豸DNS��ַ
		szDNS1 = new byte[16]; // DNS��ַ��û��
		szUserName = new byte[16]; // �û���
		szPwd = new byte[16]; // ����
		szCameraVer = new byte[8]; // ����汾
		szWanServerIP = new byte[28]; // ������IP
		szServerPort = new byte[4]; // �������˿�
		szCamSerial = new byte[24]; // �豸���к�
		szTutkID = new byte[24];
		szRevsered1 = new byte[16];
		szWiFiIP = new byte[20]; // WiFi��IP
		szWiFiSSID = new byte[128]; // WiFi����
		szWiFiPwd = new byte[68]; // WiFi����
		szWiFiMasK = new byte[16]; // WiFi����������
		szWiFiGateWay = new byte[16]; // WiFi������
		szWiFiDNS0 = new byte[16]; // WiFi��DNS��ַ
		szWiFiDNS1 = new byte[16]; //
		szNewPwd = new byte[16]; // the new password
		szRevsered2 = new byte[16];

		setServier_ip(new byte[37]);
		setUsername(new byte[16]);
		setPassword(new byte[16]);
		szBindAccont = new byte[48]; // ���û���
		szDevSAddr = new byte[48];
		setSzSMTPReceiver(new byte[64]);
		motionblock = new byte[4];

		// aSchedules = new Schedule[8];
		// szRevsered2 = new byte[204];

		nCmd = Utils.ntohi(byteBuf.getInt()); // ��ʶ������
		byteBuf.get(szPacketFlag, 0, 24); // ��ʶ�ַ�
		byteBuf.get(szDeviceName, 0, 20); // �豸����
		byteBuf.get(szDeviceType, 0, 24); // �豸����
		nMaxChannel = Utils.ntohi(byteBuf.getInt()); // ���ͨ����
		byteBuf.get(szDeviceIP, 0, 16); // �豸IP
		byteBuf.get(szDeviceMasK, 0, 16); // �豸��������
		byteBuf.get(szDeviceGateWay, 0, 16); // �豸����
		byteBuf.get(szMultiAddr, 0, 16); // �豸�ಥ��ַ
//by marshal	
//		byteBuf.get(szMacAddr, 0, 32); // �豸MAC ��ַ
		byteBuf.get(szMacAddr_LAN, 0, 8); // �豸MAC ��ַ
		byteBuf.get(szMacAddr_WIFI, 0, 8); // �豸MAC ��ַ
		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // �豸DHCP, by marshal
		byteBuf.get(szRevsered0, 0, 12); // reserved
///end		

		byteBuf.get(szDNS0, 0, 16); // �豸DNS��ַ
		byteBuf.get(szDNS1, 0, 16); // DNS��ַ��û��
		nMultiPort = Utils.ntohi(byteBuf.getInt()); // �ಥ�˿�
		nDataPort = Utils.ntohi(byteBuf.getInt()); // ���ݶ˿�
		nWebServerPort = Utils.ntohi(byteBuf.getInt()); // WEB �˿�

		byteBuf.get(szUserName, 0, 16); // �û���
		byteBuf.get(szPwd, 0, 16); // ����
		byteBuf.get(szCameraVer, 0, 8); // ����汾

		byteBuf.get(szWanServerIP, 0, 28); // ������IP
		Utils.ntohi(byteBuf.getInt()); // �������˿�
		byteBuf.get(szCamSerial, 0, 24); // �豸���к�
		byteBuf.get(szTutkID, 0, 24);
		nSdTotal = Utils.ntohi(byteBuf.getInt());
		nSdFree = Utils.ntohi(byteBuf.getInt());
		nBattery = byteBuf.get();
		byteBuf.get(szRevsered1, 0, 7);
		nEnableWiFiDHCP = Utils.ntohi(byteBuf.getInt()); // �Ƿ�����WiFi��DHCP
		nEnableWiFi = Utils.ntohi(byteBuf.getInt()); // �Ƿ�����WiFi
		nWiFiEncryMode = Utils.ntohi(byteBuf.getInt()); // WiFi����ģʽ
		byteBuf.get(szWiFiIP, 0, 20); // WiFi��IP
		byteBuf.get(szWiFiSSID, 0, 128); // WiFi����
		byteBuf.get(szWiFiPwd, 0, 68); // WiFi����, by marshal
//		nEnableDeviceDHCP = Utils.ntohi(byteBuf.getInt()); // �豸DHCP, by marshal
		byteBuf.get(szWiFiMasK, 0, 16); // WiFi����������
		byteBuf.get(szWiFiGateWay, 0, 16); // WiFi������
		byteBuf.get(szWiFiDNS0, 0, 16); // WiFi��DNS��ַ
		byteBuf.get(szWiFiDNS1, 0, 16); //

		uOfferSize = Utils.ntohi(byteBuf.getInt()); // �ṩ����Ƶ�ֱ���
		uImageSize = Utils.ntohi(byteBuf.getInt()); // ��ǰ��Ƶ�ֱ���
		uMirror = Utils.ntohi(byteBuf.getInt()); // ��Ƶ����
		uFlip = Utils.ntohi(byteBuf.getInt()); // ��Ƶ��ת
		uRequestStream = Utils.ntohi(byteBuf.getInt());//
		uBitrate1 = Utils.ntohi(byteBuf.getInt()); // ������	
		uFramerate1Val = Utils.ntohs(byteBuf.getShort()); //֡��ֵ
		uFramerate1 = Utils.ntohs(byteBuf.getShort()); // ֡��
		uBitrate2 = Utils.ntohi(byteBuf.getInt()); // ������
		uFramerate2Val = Utils.ntohs(byteBuf.getShort()); // ֡��ֵ
		uFramerate2 = Utils.ntohs(byteBuf.getShort()); // ֡��
		uImagesource = Utils.ntohi(byteBuf.getInt()); // �ֱ���(NTSC/PAL)
		uChangePWD = Utils.ntohi(byteBuf.getInt()); // 1: need to change 0: not
													// to change
		byteBuf.get(szNewPwd, 0, 16); // the new password
		nDeviceNICType = Utils.ntohi(byteBuf.getInt()); // 0 wired NIC =
														// Utils.ntohi(byteBuf.getInt());1
														// wifi NIC
		uEnableAudio = Utils.ntohi(byteBuf.getInt()); // �Ƿ�����Ƶ
		bgioinenable = byteBuf.get();	 ///< GIO input enable
		bgiointype = byteBuf.get();	 	 ///< GIO input type
		bgiooutenable = byteBuf.get();	 ///< GIO output enable
		bgioouttype = byteBuf.get();	 ///< GIO output type
		bAlarmEnable = byteBuf.get();	 ///alarm enable or disable
		cRs485baudrate = byteBuf.get(); ///0-9600 1-4800 2-2400  3-1200, 4-disable-gpio 5-disable-rs232
		uSnapInterval = Utils.ntohs(byteBuf.getShort());					///from 1minute to 24hour=24*60, 0--disable, 2014-01-26
		nAudioEncoderType = byteBuf.get();					///0--G711 1--aac 2--adpcm 3--pcm
		uCloudSaveType = byteBuf.get();					///0--none,  1--sd, 2--cloud, server 3- all
		uCloudSaveStream = byteBuf.get();					///0--big 1--small
		uCloudSaveTime = Utils.ntohs(byteBuf.getShort());				///0--5, n>1--10second*n
		///////rate control, if you don't know how to use it, please don't touch these paras...
		nRateControl1 = byteBuf.get();//0--auto 1--vbr 2--cbr
		nRateControl2 = byteBuf.get();//0--auto 1--vbr 2--cbr
		nQPMax1 = byteBuf.get();
		nQPMin1 = byteBuf.get();
		nQPMax2 = byteBuf.get();
		nQPMin2 = byteBuf.get();
		nIPRatio1 = byteBuf.get();
		nIPRatio2 = byteBuf.get();
		///////rate control end
		//////OSD, 20140513
		bOSDTimeStampEnable1 = byteBuf.get();
		bOSDDateStampEnable1 = byteBuf.get();
		bOSDTimeStampEnable2 = byteBuf.get();
		bOSDDateStampEnable2 = byteBuf.get();
		//////RTSP on, 20140702
		bRTST_On = byteBuf.get();
		//////bright contrast  and saturation
		uBrightness = byteBuf.get();
		uContrast = byteBuf.get();
		uSaturation = byteBuf.get();
		////ir light
		nIRLightControlMethod = byteBuf.get();//0-auto, 1-on, 2-off
		bFormatSD = byteBuf.get();///1-format sd
		//////
		njpegquality = byteBuf.get();
		snaptime1 = Utils.ntohi(byteBuf.getInt());
		snaptime2 = Utils.ntohi(byteBuf.getInt());
		videoEncType = byteBuf.get();
		videoSizeCh1 = byteBuf.get();
		videoSizeCh2 = byteBuf.get();
		byteBuf.get(szRevsered2, 0, 3);

		setnAlarmAudioPlay(byteBuf.get());
		nAlarmDuration = byteBuf.get();
		setbAlarmUploadFTP(byteBuf.get());
		setbAlarmSaveToSD(byteBuf.get());
		setbSetFTPSMTP(byteBuf.get());
		byteBuf.get(getServier_ip(), 0, 37);
		byteBuf.get(getUsername(), 0, 16);
		byteBuf.get(getPassword(), 0, 16);
		setuPort(Utils.ntohi(byteBuf.getInt()));

		byteBuf.get(szBindAccont, 0, 48); // ���û���
		byteBuf.get(szDevSAddr, 0, 48);
		uDevSPort = Utils.ntohi(byteBuf.getInt());
		byteBuf.get(getSzSMTPReceiver(), 0, 64);
		setMotionenable(byteBuf.get());
		motioncenable = byteBuf.get();
		setMotionlevel(byteBuf.get());
		motioncvalue = byteBuf.get();
		byteBuf.get(motionblock, 0, 4);
		setbDeviceRest(byteBuf.get());
		setbEnableEmailRcv(byteBuf.get());
		setbAttachmentType(byteBuf.get());
		setNtp_timezone(byteBuf.get());
		setnYear(Utils.ntohi(byteBuf.getInt()));
		setnMon(byteBuf.get());
		setnDay(byteBuf.get());
		setnHour(byteBuf.get());
		setnMin(byteBuf.get());
		setnSec(byteBuf.get());
		setnSdinsert(byteBuf.get());
		setbSchedulesUploadFTP(byteBuf.get());
		setbSchedulesSaveToSD(byteBuf.get());
			
		aSchedules = new Schedule[8];
		for (int i = 0; i < 8; i++)
		{
			byte buf[] = new byte[8];
			byteBuf.get(buf, 0, 8);
			aSchedules[i] = new Schedule(buf);
		}
		// byteBuf.get(szRevsered2, 0, 204);
		
		//printflog();
	}

	public ByteBuffer toByteBuffer()
	{
		ByteBuffer retBuf = ByteBuffer.allocate(1088);
		retBuf.putInt(Utils.htoni(nCmd)); // ��ʶ������
		retBuf.put(szPacketFlag, 0, 24); // ��ʶ�ַ�
		retBuf.put(szDeviceName, 0, 20); // �豸����
		retBuf.put(szDeviceType, 0, 24); // �豸����
		retBuf.putInt(Utils.htoni(nMaxChannel)); // ���ͨ����
		retBuf.put(szDeviceIP, 0, 16); // �豸IP
		retBuf.put(szDeviceMasK, 0, 16); // �豸��������
		retBuf.put(szDeviceGateWay, 0, 16); // �豸����
		retBuf.put(szMultiAddr, 0, 16); // �豸�ಥ��ַ
//by marshal	
//		retBuf.put(szMacAddr, 0, 32); // �豸MAC ��ַ
		retBuf.put(szMacAddr_LAN, 0, 8); // �豸MAC ��ַ
		retBuf.put(szMacAddr_WIFI, 0, 8); // �豸MAC ��ַ
		retBuf.putInt(Utils.htoni(nEnableDeviceDHCP)); // �豸DHCP
		retBuf.put(szRevsered0, 0, 12); // reserved
///end		
		retBuf.put(szDNS0, 0, 16); // �豸DNS��ַ
		retBuf.put(szDNS1, 0, 16); // DNS��ַ��û��
		retBuf.putInt(Utils.htoni(nMultiPort)); // �ಥ�˿�
		retBuf.putInt(Utils.htoni(nDataPort)); // ���ݶ˿�
		retBuf.putInt(Utils.htoni(nWebServerPort)); // WEB �˿�

		retBuf.put(szUserName, 0, 16); // �û���
		retBuf.put(szPwd, 0, 16); // ����
		retBuf.put(szCameraVer, 0, 8); // ����汾

		retBuf.put(szWanServerIP, 0, 28); // ������IP
		retBuf.put(szServerPort, 0, 4); // �������˿�
		retBuf.put(szCamSerial, 0, 24); // �豸���к�
		retBuf.put(szTutkID, 0, 24);
		retBuf.putInt(Utils.htoni(nSdTotal));
		retBuf.putInt(Utils.htoni(nSdFree));
		retBuf.put(nBattery);
		retBuf.put(szRevsered1, 0, 7);
		
		retBuf.putInt(Utils.htoni(nEnableWiFiDHCP)); // �Ƿ�����WiFi��DHCP
		retBuf.putInt(Utils.htoni(nEnableWiFi)); // �Ƿ�����WiFi
		retBuf.putInt(Utils.htoni(nWiFiEncryMode)); // WiFi����ģʽ
		retBuf.put(szWiFiIP, 0, 20); // WiFi��IP
		retBuf.put(szWiFiSSID, 0, 128); // WiFi����
		retBuf.put(szWiFiPwd, 0, 68); // WiFi����
//		retBuf.putInt(Utils.htoni(nEnableDeviceDHCP)); // �豸DHCP
		retBuf.put(szWiFiMasK, 0, 16); // WiFi����������
		retBuf.put(szWiFiGateWay, 0, 16); // WiFi������
		retBuf.put(szWiFiDNS0, 0, 16); // WiFi��DNS��ַ
		retBuf.put(szWiFiDNS1, 0, 16); //

		retBuf.putInt(Utils.htoni(uOfferSize)); // �ṩ����Ƶ�ֱ���
		retBuf.putInt(Utils.htoni(uImageSize)); // ��ǰ��Ƶ�ֱ���
		retBuf.putInt(Utils.htoni(uMirror)); // ��Ƶ����
		retBuf.putInt(Utils.htoni(uFlip)); // ��Ƶ��ת
		retBuf.putInt(Utils.htoni(uRequestStream));//
		retBuf.putInt(Utils.htoni(uBitrate1)); // ������
		retBuf.putShort(Utils.htons(uFramerate1Val)); // ֡��ֵ
		retBuf.putShort(Utils.htons(uFramerate1)); // ֡��
		retBuf.putInt(Utils.htoni(uBitrate2)); // ������
		retBuf.putShort(Utils.htons(uFramerate2Val)); // ֡��ֵ
		retBuf.putShort(Utils.htons(uFramerate2)); // ֡��

		retBuf.putInt(Utils.htoni(uImagesource)); // �ֱ���(NTSC/PAL)
		retBuf.putInt(Utils.htoni(uChangePWD)); // 1: need to change 0: not to
												// change
		retBuf.put(szNewPwd, 0, 16); // the new password
		retBuf.putInt(Utils.htoni(nDeviceNICType)); // 0 wired NIC);1 wifi NIC
		retBuf.putInt(Utils.htoni(uEnableAudio)); // �Ƿ�����Ƶ

		retBuf.put(bgioinenable);	 ///< GIO input enable
		retBuf.put(bgiointype);	 ///< GIO input type
		retBuf.put(bgiooutenable);	 ///< GIO output enable
		retBuf.put(bgioouttype);	 ///< GIO output type
		retBuf.put(bAlarmEnable);	 ///alarm enable or disable
		retBuf.put(cRs485baudrate); ///0-9600 1-4800 2-2400  3-1200, 4-disable-gpio 5-disable-rs232
		retBuf.putShort(Utils.htons(uSnapInterval));					///from 1minute to 24hour=24*60, 0--disable, 2014-01-26
		retBuf.put(nAudioEncoderType);					///0--G711 1--aac 2--adpcm 3--pcm
		retBuf.put(uCloudSaveType);					///0--none,  1--sd, 2--cloud, server 3- all
//		retBuf.put(uCloudClear);
		retBuf.put(uCloudSaveStream);					///0--big 1--small
		retBuf.putShort(Utils.htons(uCloudSaveTime));					///0--5, n>1--10second*n
		///////rate control, if you don't know how to use it, please don't touch these paras...
		retBuf.put(nRateControl1);//0--auto 1--vbr 2--cbr
		retBuf.put(nRateControl2);//0--auto 1--vbr 2--cbr
		retBuf.put(nQPMax1);
		retBuf.put(nQPMin1);
		retBuf.put(nQPMax2);
		retBuf.put(nQPMin2);
		retBuf.put(nIPRatio1);//
		retBuf.put(nIPRatio2);
		///////rate control end
		//////OSD, 20140513
		retBuf.put(bOSDTimeStampEnable1);
		retBuf.put(bOSDDateStampEnable1);
		retBuf.put(bOSDTimeStampEnable2);
		retBuf.put(bOSDDateStampEnable2);
		//////RTSP on, 20140702
		retBuf.put(bRTST_On);
		//////bright contrast  and saturation
		retBuf.put(uBrightness);
		retBuf.put(uContrast);
		retBuf.put(uSaturation);
		////ir light
		retBuf.put(nIRLightControlMethod);//0-auto, 1-on, 2-off
		retBuf.put(bFormatSD);//1-formate
		retBuf.put(njpegquality);
		retBuf.putInt(Utils.htoni(snaptime1)); 
		retBuf.putInt(Utils.htoni(snaptime2));
		retBuf.put(videoEncType);
		retBuf.put(videoSizeCh1);
		retBuf.put(videoSizeCh2);
		retBuf.put(szRevsered2, 0, 3);
		
		retBuf.put(getnAlarmAudioPlay());
		retBuf.put(nAlarmDuration);
		retBuf.put(getbAlarmUploadFTP());
		retBuf.put(getbAlarmSaveToSD());
		retBuf.put(getbSetFTPSMTP());
		retBuf.put(getServier_ip(), 0, 37);
		retBuf.put(getUsername(), 0, 16);
		retBuf.put(getPassword(), 0, 16);
		retBuf.putInt(Utils.htoni(getuPort()));

		retBuf.put(szBindAccont, 0, 48); // ���û���
		// retBuf.put(szRevsered2, 0, 204);
		retBuf.put(szDevSAddr, 0, 48);

		retBuf.putInt(Utils.htoni(uDevSPort));
		retBuf.put(getSzSMTPReceiver(), 0, 64);

		retBuf.put(getMotionenable());
		retBuf.put(motioncenable);
		retBuf.put(getMotionlevel());
		retBuf.put(motioncvalue);
		retBuf.put(motionblock, 0, 4);
		retBuf.put(getbDeviceRest());
		retBuf.put(getbEnableEmailRcv());
		retBuf.put(getbAttachmentType());
		retBuf.put(getNtp_timezone());

		retBuf.putInt(Utils.htoni(getnYear()));
		retBuf.put(getnMon());
		retBuf.put(getnDay());
		retBuf.put(getnHour());
		retBuf.put(getnMin());
		retBuf.put(getnSec());
		retBuf.put(getnSdinsert());
		retBuf.put(getbSchedulesUploadFTP());
		retBuf.put(getbSchedulesSaveToSD());

		for (int i = 0; i < 8; i++)
		{
			retBuf.put(aSchedules[i].getScheduleBuffer(), 0, 8);
		}

		retBuf.flip();
		return retBuf;
	}

	protected String byteToString(byte[] src)
	{
		int len = 0;
		for (; len < src.length; len++)
		{
			if (src[len] == 0)
			{
				break;
			}
		}
		return new String(src, 0, len);
	}

	protected byte[] StringToByte(String str, int length)
	{
		byte retByte[] = new byte[length];
		byte strByte[] = str.getBytes();
		for (int i = 0; i < strByte.length && i < length; i++)
		{
			retByte[i] = strByte[i];
		}
		return retByte;
	}
	
	public void printflog()
	{	
		System.out.println("**********************device info********************");
		System.out.println("nCmd:"+getCmd());
		System.out.println("szPacketFlag:"+ getPacketFlag());
		System.out.println("szDeviceName:"+ getDeviceName());
		System.out.println("szDeviceType:"+ getDeviceType());
		System.out.println("nMaxChannel:"+ getMaxChannel());
		System.out.println("szDeviceIP:"+getDeviceIP());
		System.out.println("szDeviceMasK:"+getDeviceMasK());
		System.out.println("szDeviceGateWay:"+getDeviceGateWay());
		System.out.println("szMultiAddr:"+getMultiAddr());
		System.out.println("szMacAddr_LAN:"+getMacAddr_LAN());
		System.out.println("szMacAddr_WIFI:"+getMacAddr_WIFI());
		System.out.println("nEnableDeviceDHCP:"+getEnableDeviceDHCP());
		System.out.println("szDNS0:"+getDNS0());
		System.out.println("szDNS1:"+getDNS1());
		System.out.println("nMultiPort:"+getMultiPort());
		System.out.println("nDataPort:"+getDataPort());
		System.out.println("nWebServerPort:"+getWebServerPort());
		System.out.println("szUserName:"+getszUserName());
		System.out.println("szPwd:"+getPwd());
		System.out.println("szCameraVer:"+getCameraVer());
		System.out.println("szWanServerIP:"+getWanServerIP());
		System.out.println("szServerPort:"+getServerPort());
		System.out.println("szCamSerial:"+getCamSerial());
		System.out.println("szTutkID:"+getTutkID());
		System.out.println("nSdTotal:"+getSdTotal());
		System.out.println("nSDFree:"+getSdFree());
		System.out.println("nBattery:"+getBattery());
		System.out.println("nEnableWiFiDHCP:"+getEnableWiFiDHCP());
		System.out.println("nEnableWiFi:"+getEnableWiFi());
		System.out.println("nWiFiEncryMode:"+getWiFiEncryMode());
		System.out.println("szWiFiIP:"+getWiFiIP());
		System.out.println("szWiFiSSID:"+getWiFiSSID());
		System.out.println("szWiFiPwd:"+getWiFiPwd());
		System.out.println("szWiFiMasK:"+getWiFiMasK());
		System.out.println("szWiFiGateWay:"+getWiFiGateWay());
		System.out.println("szWiFiDNS0:"+getWiFiDNS0());
		System.out.println("szWiFiDNS1:"+getWiFiDNS1());
		System.out.println("uOfferSize:"+getOfferSize());
		System.out.println("uImageSize:"+getImageSize());
		System.out.println("uMirror:"+getMirror());
		System.out.println("uFlip:"+getFlip());
		System.out.println("uRequestStream:"+getRequestStream());
		System.out.println("uBitrate1:"+getBitrate1());
		System.out.println("uFramerate1Val:"+getFramerate1Val());
		System.out.println("uFramerate1:"+getFramerate1());
		System.out.println("uBitrate2:"+getBitrate2());
		System.out.println("uFramerate2Val:"+getFramerate2Val());
		System.out.println("uFramerate2:"+getFramerate2());
		System.out.println("uImagesource:"+getImagesource());
		System.out.println("uChangePWD:"+getChangePWD());
		System.out.println("szNewPwd:"+getNewPwd());
		System.out.println("nDeviceNICType:"+getDeviceNICType());
		System.out.println("uEnableAudio:"+getEnableAudio());
		System.out.println("bgioinenable:"+getbgioinenable());
		System.out.println("bgiointype:"+getbgiointype());
		System.out.println("bgiooutenable:"+getbgiooutenable());
		System.out.println("bgioouttype:"+getbgioouttype());
		System.out.println("bAlarmEnable:"+getbAlarmEnable());
		System.out.println("cRs485baudrate:"+getcRs485baudrate());
		System.out.println("uSnapInterval:"+getuSnapInterval());
		System.out.println("nAudioEncoderType:"+getnAudioEncoderType());
		System.out.println("uCloudSaveType:"+getuCloudSaveType());
		System.out.println("uCloudSaveStream:"+getuCloudSaveStream());
		System.out.println("uCloudSaveTime:"+getuCloudSaveTime());
		System.out.println("nRateControl1:"+getnRateControl1());
		System.out.println("nRateControl2:"+getnRateControl2());
		System.out.println("nQPMax1:"+getnQPMax1());
		System.out.println("nQPMin1:"+getnQPMin1());
		System.out.println("nQPMax2:"+getnQPMax2());
		System.out.println("nQPMin2:"+getnQPMin2());
		System.out.println("nIPRatio1:"+getnIPRatio1());
		System.out.println("nIPRatio2:"+getnIPRatio2());
		System.out.println("bOSDTimeStampEnable1:"+getbOSDTimeStampEnable1());
		System.out.println("bOSDDateStampEnable1:"+getbOSDDateStampEnable1());
		System.out.println("bOSDTimeStampEnable2:"+getbOSDTimeStampEnable2());
		System.out.println("bOSDDateStampEnable2:"+getbOSDDateStampEnable2());
		System.out.println("bRTST_On:"+getbRTST_On());
		System.out.println("uBrightness:"+getuBrightness());
		System.out.println("uContrast:"+getuContrast());
		System.out.println("uSaturation:"+getuSaturation());
		System.out.println("nIRLightControlMethod:"+getnIRLightControlMethod());
		System.out.println("bFormatSD:"+getbFormatSD());
		System.out.println("njpegquality:"+getNjpegquality());
		System.out.println("snaptime1:"+getSnaptime1());
		System.out.println("snaptime2:"+getSnaptime2());
		System.out.println("videoEncType:"+getVideoEncType());
		System.out.println("videoSizeCh1:"+getVideoSizeCh1());
		System.out.println("videoSizeCh2:"+getVideoSizeCh2());
		System.out.println("nAlarmAudioPlay:"+getnAlarmAudioPlay());
		System.out.println("nAlarmDuration:"+getnAlarmDuration());
		
		
		System.out.println("bAlarmUploadFTP:"+getbAlarmUploadFTP());
		System.out.println("bAlarmSaveToSD:"+getbAlarmSaveToSD());
		System.out.println("bSetFTPSMTP:"+getbSetFTPSMTP());
		System.out.println("servier_ip:"+getServier_ip());
		System.out.println("username:"+getUsername());
		System.out.println("password:"+getPassword());
		System.out.println("uPort:"+getuPort());
		System.out.println("szBindAccont:"+getBindAccont());
		System.out.println("szDevSAddr:"+getszDevSAddr());
		System.out.println("uDevSPort:"+getuDevSPort());
		System.out.println("szSMTPReceiver:"+getSzSMTPReceiver());
		System.out.println("motionenable:"+getMotionenable());
		System.out.println("motioncenable:"+getmotioncenable());
		System.out.println("motionlevel:"+getMotionlevel());
		System.out.println("motioncvalue:"+getmotioncvalue());
		System.out.println("motionblock:"+getmotionblock());
		System.out.println("bDeviceRest:"+getbDeviceRest());
		System.out.println("bEnableEmailRcv:"+getbEnableEmailRcv());
		System.out.println("bAttachmentType:"+getbAttachmentType());
		System.out.println("ntp_timezone:"+getNtp_timezone());
		System.out.println("nYear:"+getnYear());
		System.out.println("nMon:"+getnMon());
		System.out.println("nDay:"+getnDay());
		System.out.println("nHour:"+getnHour());
		System.out.println("nMin:"+getnMin());
		System.out.println("nSec:"+getnSec());
		System.out.println("nSdinsert:"+getnSdinsert());
		System.out.println("bSchedulesUploadFTP:"+getbSchedulesUploadFTP());
		System.out.println("bSchedulesSaveToSD:"+getbSchedulesSaveToSD());
		System.out.println("**********************device info********************");
	}

	public String getPacketFlag()
	{ // ��ʶ�ַ�
		return byteToString(szPacketFlag);
	}

	public String getDeviceName()
	{ // �豸����
		return byteToString(szDeviceName);
	}

	public String getDeviceType()
	{ // �豸����
		return byteToString(szDeviceType);
	}

	public String getDeviceIP()
	{ // �豸IP
		return byteToString(szDeviceIP);
	}

	public String getDeviceMasK()
	{ // �豸��������
		return byteToString(szDeviceMasK);
	}

	public String getDeviceGateWay()
	{ // �豸����
		return byteToString(szDeviceGateWay);
	}

	public String getMultiAddr()
	{ // �豸�ಥ��ַ
		return byteToString(szMultiAddr);
	}

	public String getMacAddr_LAN()
	{ // �豸MAC ��ַ
		return byteToString(szMacAddr_LAN);
	}
	
	public String getMacAddr_WIFI()
	{ // �豸MAC ��ַ
		return byteToString(szMacAddr_WIFI);
	}
	
	public String getDNS0()
	{ // �豸DNS��ַ
		return byteToString(szDNS0);
	}

	public String getDNS1()
	{ // DNS��ַ��û��
		return byteToString(szDNS1);
	}
	
	public String getszUserName()
	{ //�û���
		return byteToString(szUserName);
	}
	
	public String getPwd()
	{ // ����
		return byteToString(szPwd);
	}

	public String getCameraVer()
	{ // ����汾
		return byteToString(szCameraVer);
	}

	public String getWanServerIP()
	{ // ������IP
		return byteToString(szWanServerIP);
	}

	public String getServerPort()
	{ // �������˿�
		return byteToString(szServerPort);
	}

	public String getCamSerial()
	{ // �豸���к�
		return byteToString(szCamSerial);
	}
	
	public String getTutkID()
	{ // tutkID
		return byteToString(szTutkID);
	}
	
	public int getSdTotal()
	{ // ��ʶ������
		return nSdTotal;
	}
	public int getSdFree()
	{ // ��ʶ������
		return nSdFree;
	}
	
	public byte getBattery()
	{ // tutkID
		return nBattery;
	}
	
	public String getWiFiIP()
	{ // WiFi��IP
		return byteToString(szWiFiIP);
	}

	public String getWiFiSSID()
	{ // WiFi����
		return byteToString(szWiFiSSID);
	}

	public String getWiFiPwd()
	{ // WiFi����
		return byteToString(szWiFiPwd);
	}

	public String getWiFiMasK()
	{ // WiFi����������
		return byteToString(szWiFiMasK);
	}

	public String getWiFiGateWay()
	{ // WiFi������
		return byteToString(szWiFiGateWay);
	}

	public String getWiFiDNS0()
	{ // WiFi��DNS��ַ
		return byteToString(szWiFiDNS0);
	}

	public String getWiFiDNS1()
	{ 	//WIFI��DNS1��ַ
		return byteToString(szWiFiDNS1);
	}

	public String getNewPwd()
	{ // the new password
		return byteToString(szNewPwd);
	}
	
	public String getRevsered2()
	{ // ����szRevsered2�ֶ�
		return byteToString(szRevsered2);
	}
	
	public String getBindAccont()
	{ // ���û���
		return byteToString(szBindAccont);
	}
	
	public String getszDevSAddr()
	{ //�豸��������ַ������
		return byteToString(szDevSAddr);
	}
	
	public int getuDevSPort()
	{ //�豸��������ַ������
		return uDevSPort;
	}
	

	public void setPacketFlag(String strValue)
	{ // ��ʶ�ַ�
		szPacketFlag = StringToByte(strValue, szPacketFlag.length);
	}

	public void setDeviceName(String strValue)
	{
		// �豸����
		szDeviceName = StringToByte(strValue, szDeviceName.length);
	}

	public void setDeviceType(String strValue)
	{ // �豸����
		szDeviceType = StringToByte(strValue, szDeviceType.length);
	}

	public void setDeviceIP(String strValue)
	{ // �豸IP
		szDeviceIP = StringToByte(strValue, szDeviceIP.length);
	}

	public void setDeviceMasK(String strValue)
	{ // �豸��������
		szDeviceMasK = StringToByte(strValue, szDeviceMasK.length);
	}

	public void setDeviceGateWay(String strValue)
	{ // �豸����
		szDeviceGateWay = StringToByte(strValue, szDeviceGateWay.length);
	}

	public void setMultiAddr(String strValue)
	{ // �豸�ಥ��ַ
		szMultiAddr = StringToByte(strValue, szMultiAddr.length);
	}

	public void setMacAddr_LAN(String strValue)
	{ // �豸MAC ��ַ
		szMacAddr_LAN = StringToByte(strValue, szMacAddr_LAN.length);
	}
	
	public void setMacAddr_WIFI(String strValue)
	{ // �豸MAC ��ַ
		szMacAddr_WIFI = StringToByte(strValue, szMacAddr_WIFI.length);
	}
	
	public void setDNS0(String strValue)
	{ // �豸DNS��ַ
		szDNS0 = StringToByte(strValue, szDNS0.length);
	}

	public void setDNS1(String strValue)
	{ // DNS��ַ��û��
		szDNS1 = StringToByte(strValue, szDNS1.length);
	}

	public void setszUserName(String strValue)
	{ // �û���
		szUserName = StringToByte(strValue, szUserName.length);
	}

	public void setPwd(String strValue)
	{ // ����
		szPwd = StringToByte(strValue, szPwd.length);
	}

	public void setCameraVer(String strValue)
	{ // ����汾
		szCameraVer = StringToByte(strValue, szCameraVer.length);
	}

	public void setWanServerIP(String strValue)
	{ // ������IP
		szWanServerIP = StringToByte(strValue, szWanServerIP.length);
	}

	public void setServerPort(String strValue)
	{ // �������˿�
		szServerPort = StringToByte(strValue, szServerPort.length);
	}

	public void setCamSerial(String strValue)
	{ // �豸���к�
		szCamSerial = StringToByte(strValue, szCamSerial.length);
	}
	
	public void setSDTotal(int SdTotal)
	{ // tutkID
		nSdTotal = SdTotal;
	}
	
	public void setSdFree(int SdFree)
	{ // tutkID
		nSdFree = SdFree;
	}
	
	public void setBattery(byte Battery)
	{ // tutkID
		nBattery = Battery;
	}

	public void setWiFiIP(String strValue)
	{ // WiFi��IP
		szWiFiIP = StringToByte(strValue, szWiFiIP.length);
	}

	public void setWiFiSSID(String strValue)
	{ // WiFi����
		szWiFiSSID = StringToByte(strValue, szWiFiSSID.length);
	}

	public void setWiFiPwd(String strValue)
	{ // WiFi����
		szWiFiPwd = StringToByte(strValue, szWiFiPwd.length);
	}

	public void setWiFiMasK(String strValue)
	{ // WiFi����������
		szWiFiMasK = StringToByte(strValue, szWiFiMasK.length);
	}

	public void setWiFiGateWay(String strValue)
	{ // WiFi������
		szWiFiGateWay = StringToByte(strValue, szWiFiGateWay.length);
	}

	public void setWiFiDNS0(String strValue)
	{ // WiFi��DNS��ַ
		szWiFiDNS0 = StringToByte(strValue, szWiFiDNS0.length);
	}

	public void setWiFiDNS1(String strValue)
	{ //
		szWiFiDNS1 = StringToByte(strValue, szWiFiDNS1.length);
	}

	public void setNewPwd(String strValue)
	{ // the new password
		szNewPwd = StringToByte(strValue, szNewPwd.length);
	}

	public void setBindAccont(String strValue)
	{ // ���û���
		szBindAccont = StringToByte(strValue, szBindAccont.length);
	}
	
	public void setszDevSAddr(String strValue)
	{ //�豸��������ַ������
		szDevSAddr = StringToByte(strValue, szDevSAddr.length);
	}
	
	public int getCmd()
	{ // ��ʶ������
		return nCmd;
	}
	
	

	public int getMaxChannel()
	{ // ���ͨ����
		return nMaxChannel;
	}

	public int getMultiPort()
	{ // �ಥ�˿�
		return nMultiPort;
	}

	public int getDataPort()
	{ // ���ݶ˿�
		return nDataPort;
	}

	public int getWebServerPort()
	{ // WEB �˿�
		return nWebServerPort;
	}

	public int getEnableWiFiDHCP()
	{ // �Ƿ�����WiFi��DHCP
		return nEnableWiFiDHCP;
	}

	public int getEnableWiFi()
	{ // �Ƿ�����WiFi
		return nEnableWiFi;
	}

	public int getWiFiEncryMode()
	{ // WiFi����ģʽ
		return nWiFiEncryMode;
	}

	public int getEnableDeviceDHCP()
	{ // �豸DHCP
		return nEnableDeviceDHCP;
	}

	public int getOfferSize()
	{ // �ṩ����Ƶ�ֱ���
		return uOfferSize;
	}

	public int getImageSize()
	{ // ��ǰ��Ƶ�ֱ���
		return uImageSize;
	}

	public int getMirror()
	{ // ��Ƶ����
		return uMirror;
	}

	public int getFlip()
	{ // ��Ƶ��ת
		return uFlip;
	}

	public int getRequestStream()
	{//
		return uRequestStream;
	}

	public int getBitrate1()
	{ // ������
		return uBitrate1;
	}
	
	public short getFramerate1Val()
	{ // ֡��ֵ
		return uFramerate1Val;
	}
	

	public short getFramerate1()
	{ // ֡��
		return uFramerate1;
	}

	// �ڶ�·����;
	public int getBitrate2()
	{ // ������
		return uBitrate2;
	}
	
	public short getFramerate2Val()
	{ // ֡��ֵ
		return uFramerate2Val;
	}
	
	public short getFramerate2()
	{ // ֡��
		return uFramerate2;
	}

	public int getImagesource()
	{ // �ֱ���(NTSC/PAL)
		return uImagesource;
	}

	public int getChangePWD()
	{ // 1: need to change 0: not to change
		return uChangePWD;
	}

	public int getDeviceNICType()
	{ // 0 wired NIC(){1 wifi NIC
		return nDeviceNICType;
	}

	public int getEnableAudio()
	{ // �Ƿ�����Ƶ
		return uEnableAudio;
	}
	
	public byte getbgioinenable()
	{  ///< GIO input enable
		return bgioinenable;
	}
	
	public byte getbgiointype()
	{  ///< GIO input type
		return bgiointype;
	}
	
	public byte getbgiooutenable()
	{   ///< GIO output enable
		return bgiooutenable;
	}
	
	public byte getbgioouttype()
	{   ///< GIO output type
		return bgioouttype;
	}
	
	public byte getbAlarmEnable()
	{   ///alarm enable or disable
		return bAlarmEnable;
	}
	
	public byte getcRs485baudrate()
	{   ///0-9600 1-4800 2-2400  3-1200, 4-disable-gpio 5-disable-rs232
		return cRs485baudrate;
	}
	
	public short getuSnapInterval()
	{   ///from 1minute to 24hour=24*60, 0--disable, 2014-01-26
		return uSnapInterval;
	}
	
	public byte getnAudioEncoderType()
	{   ///0--G711 1--aac 2--adpcm 3--pcm
		return nAudioEncoderType;
	}
	
	public byte getuCloudSaveType()
	{   ///0--none,  1--sd, 2--cloud, server 3- all
		return uCloudSaveType;
	}
	
	public byte getuCloudSaveStream()
	{   ///0--big 1--small
		return uCloudSaveStream;
	}
	
	public short getuCloudSaveTime()
	{   ///0--5, n>1--10second*n
		return uCloudSaveTime;
	}
	
	///////rate control, if you don't know how to use it, please don't touch these paras...
	public byte getnRateControl1()
	{   //0--auto 1--vbr 2--cbr
		return nRateControl1;
	}
	
	public byte getnRateControl2()
	{   //0--auto 1--vbr 2--cbr
		return nRateControl2;
	}
	
	public byte getnQPMax1()
	{  
		return nQPMax1;
	}
	
	public byte getnQPMin1()
	{  
		return nQPMin1;
	}
	
	public byte getnQPMax2()
	{  
		return nQPMax2;
	}
	
	public byte getnQPMin2()
	{  
		return nQPMin2;
	}
	
	public byte getnIPRatio1()
	{  
		return nIPRatio1;
	}
	
	public byte getnIPRatio2()
	{  
		return nIPRatio2;
	}
	
	///////rate control end
	//////OSD, 20140513
	public byte getbOSDTimeStampEnable1()
	{  
		return bOSDTimeStampEnable1;
	}
	
	public byte getbOSDDateStampEnable1()
	{  
		return bOSDDateStampEnable1;
	}

	public byte getbOSDTimeStampEnable2()
	{  
		return bOSDTimeStampEnable2;
	}
	
	public byte getbOSDDateStampEnable2()
	{  
		return bOSDDateStampEnable2;
	}
	
	//////RTSP on, 20140702
	public byte getbRTST_On()
	{  
		return bRTST_On;
	}

	//////bright contrast  and saturation
	public byte getuBrightness()
	{  
		return uBrightness;
	}
	
	public byte getuContrast()
	{  
		return uContrast;
	}
	
	public byte getuSaturation()
	{  
		return uSaturation;
	}
	
	public byte getnIRLightControlMethod()
	{  //0-auto, 1-on, 2-off
		return nIRLightControlMethod;
	}
	
	public byte getbFormatSD()
	{
		return bFormatSD;
	}
	public byte getNjpegquality()
	{
		return njpegquality;
	}
	
	public int getSnaptime1(){
		return snaptime1;
	}
	
	public int getSnaptime2(){
		return snaptime2;
	}
	
	public byte getVideoEncType()
	{
		return videoEncType;
	}
	public byte getVideoSizeCh1()
	{
		return videoSizeCh1;
	}
	public byte getVideoSizeCh2()
	{
		return videoSizeCh2;
	}
	public byte getnAlarmDuration()
	{  // /< alarm duration 0~5{10, 30, 60, 300, 600,
		return nAlarmDuration;
	}
	
	public void setCmd(int value)
	{ // ��ʶ������
		nCmd = value;
	}

	public void setMaxChannel(int value)
	{ // ���ͨ����
		nMaxChannel = value;
	}

	public void setMultiPort(int value)
	{ // �ಥ�˿�
		nMultiPort = value;
	}

	public void setDataPort(int value)
	{ // ���ݶ˿�
		nDataPort = value;
	}

	public void setWebServerPort(int value)
	{ // WEB �˿�
		nWebServerPort = value;
	}

	public void setEnableWiFiDHCP(int value)
	{ // �Ƿ�����WiFi��DHCP
		nEnableWiFiDHCP = value;
	}

	public void setEnableWiFi(int value)
	{ // �Ƿ�����WiFi
		nEnableWiFi = value;
	}

	public void setWiFiEncryMode(int value)
	{ // WiFi����ģʽ
		nWiFiEncryMode = value;
	}

	public void setEnableDeviceDHCP(int value)
	{ // �豸DHCP
		nEnableDeviceDHCP = value;
	}

	public void setOfferSize(int value)
	{ // �ṩ����Ƶ�ֱ���
		uOfferSize = value;
	}

	public void setImageSize(int value)
	{ // ��ǰ��Ƶ�ֱ���
		uImageSize = value;
	}

	public void setMirror(int value)
	{ // ��Ƶ����
		uMirror = value;
	}

	public void setFlip(int value)
	{ // ��Ƶ��ת
		uFlip = value;
	}

	public void setRequestStream(int value)
	{//
		uRequestStream = value;
	}

	public void setBitrate1(int value)
	{ // ������
		uBitrate1 = value;
	}
	
	public void setFramerate1Val(short value)
	{ // ֡��ֵ
		uFramerate1Val = value;
	}
	
	public void setFramerate1(short value)
	{ // ֡��
		uFramerate1 = value;
	}

	// �ڶ�·���� = value;
	public void setBitrate2(int value)
	{ // ������
		uBitrate2 = value;
	}
	
	public void setFramerate2Val(short value)
	{ // ֡��
		uFramerate2Val = value;
	}
	
	public void setFramerate2(short value)
	{ // ֡��
		uFramerate2 = value;
	}

	public void setImagesource(int value)
	{ // �ֱ���(NTSC/PAL)
		uImagesource = value;
	}

	public void setChangePWD(int value)
	{ // 1: need to change 0: not to change
		uChangePWD = value;
	}

	public void setDeviceNICType(int value)
	{ // 0 wired NIC() 1 wifi NIC
		nDeviceNICType = value;
	}

	public void setEnableAudio(int value)
	{ // �Ƿ�����Ƶ
		uEnableAudio = value;
	}
	
	public void setbgioinenable(byte bgioinenable)
	{ 	///< GIO input enable
		this.bgioinenable = bgioinenable;
	}
	
	public void setbgiointype(byte bgiointype)
	{ 	///< GIO input type
		this.bgiointype = bgiointype;
	}
	
	public void setbgiooutenable(byte bgiooutenable)
	{ 	///< GIO output enable
		this.bgiooutenable = bgiooutenable;
	}
	
	public void setbgioouttype(byte bgioouttype)
	{ 	///< GIO output type
		this.bgioouttype = bgioouttype;
	}
	
	public void setbAlarmEnable(byte bAlarmEnable)
	{ 	///alarm enable or disable
		this.bAlarmEnable = bAlarmEnable;
	}
	
	public void setcRs485baudrate(byte cRs485baudrate)
	{ 	///0-9600 1-4800 2-2400  3-1200, 4-disable-gpio 5-disable-rs232
		this.cRs485baudrate = cRs485baudrate;
	}
	
	public void setuSnapInterval(short uSnapInterval)
	{ 	///from 1minute to 24hour=24*60, 0--disable, 2014-01-26
		this.uSnapInterval = uSnapInterval;
	}
	
	public void setnAudioEncoderType(byte nAudioEncoderType)
	{ 	///0--G711 1--aac 2--adpcm 3--pcm
		this.nAudioEncoderType = nAudioEncoderType;
	}
	
	public void setuCloudSaveType(byte uCloudSaveType)
	{ 	///0--none,  1--sd, 2--cloud, server 3- all
		this.uCloudSaveType = uCloudSaveType;
	}
	
	public void setuCloudSaveStream(byte uCloudSaveStream)
	{ 	///0--big 1--small
		this.uCloudSaveStream = uCloudSaveStream;
	}
	
	public void setuCloudSaveTime(short uCloudSaveTime)
	{ 	///0--5, n>1--10second*n
		this.uCloudSaveTime = uCloudSaveTime;
	}
	
	///////rate control, if you don't know how to use it, please don't touch these paras...
	public void setnRateControl1(byte nRateControl1)
	{ 	//0--auto 1--vbr 2--cbr
		this.nRateControl1 = nRateControl1;
	}
	
	public void setnRateControl2(byte nRateControl2)
	{ 	//0--auto 1--vbr 2--cbr
		this.nRateControl2 = nRateControl2;
	}
	
	public void setnQPMax1(byte nQPMax1)
	{ 	
		this.nQPMax1 = nQPMax1;
	}
	
	public void setnQPMin1(byte nQPMin1)
	{ 	
		this.nQPMin1 = nQPMin1;
	}
	
	public void setnQPMax2(byte nQPMax2)
	{ 	
		this.nQPMax2 = nQPMax2;
	}
	
	public void setnQPMin2(byte nQPMin2)
	{ 	
		this.nQPMin2 = nQPMin2;
	}
	
	public void setnIPRatio1(byte nIPRatio1)
	{ 	
		this.nIPRatio1 = nIPRatio1;
	}
	
	public void setnIPRatio2(byte nIPRatio2)
	{ 	
		this.nIPRatio2 = nIPRatio2;
	}
	
	///////rate control end
	//////OSD, 20140513
	public void setbOSDTimeStampEnable1(byte bOSDTimeStampEnable1)
	{ 	
		this.bOSDTimeStampEnable1 = bOSDTimeStampEnable1;
	}
	
	public void setbOSDDateStampEnable1(byte bOSDDateStampEnable1)
	{ 	
		this.bOSDDateStampEnable1 =  bOSDDateStampEnable1;
	}

	public void setbOSDTimeStampEnable2(byte bOSDTimeStampEnable2)
	{ 	
		this.bOSDTimeStampEnable2 =  bOSDTimeStampEnable2;
	}
	
	public void setbOSDDateStampEnable2(byte bOSDDateStampEnable2)
	{ 	
		this.bOSDDateStampEnable2 =  bOSDDateStampEnable2;
	}
	
	public void setbRTST_On(byte bRTST_On)
	{ 	//////RTSP on, 20140702
		this.bRTST_On =  bRTST_On;
	}
	
	public void setuBrightness(byte uBrightness)
	{ 	//////bright contrast  and saturation
		this.uBrightness =  uBrightness;
	}
	
	public void setuContrast(byte uContrast)
	{ 	
		this.uContrast =  uContrast;
	}
	
	public void setuSaturation(byte uSaturation)
	{ 	
		this.uSaturation =  uSaturation;
	}
	
	public void setnIRLightControlMethod(byte nIRLightControlMethod)
	{ 	////ir light//0-auto, 1-on, 2-off
		this.nIRLightControlMethod =  nIRLightControlMethod;
	}
	
	public void setbFormatSD(byte bFormatSD){
		this.bFormatSD = bFormatSD;
	}
	
	public void setNjpegquality(byte njpegquality)
	{
		this.njpegquality = njpegquality;
	}
	
	public void setSnaptime1(int snaptime1){
		this.snaptime1 = snaptime1;
	}
	
	public void setSnaptime2(int snaptime2){
		this.snaptime2 = snaptime2;
	}
	
	public void setVideoEncType(byte videoEncType)
	{
		this.videoEncType = videoEncType;
	}
	public void setVideoSizeCh1(byte videoSizeCh1)
	{
		this.videoSizeCh1 = videoSizeCh1;
	}
	public void setVideoSizeCh2(byte videoSizeCh2)
	{
		this.videoSizeCh2 = videoSizeCh2;
	}
	
	public void setnAlarmDuration(byte nAlarmDuration)
	{ 	////ir light//0-auto, 1-on, 2-off
		this.nAlarmDuration =  nAlarmDuration;
	}
	
	/**
	 * @return the ntp_timezone
	 */
	public byte getNtp_timezone()
	{
		return (byte) (ntp_timezone & 0x7f);
	}

	/**
	 * @param ntp_timezone
	 *            the ntp_timezone to set
	 */
	public void setNtp_timezone(byte ntp_timezone)
	{
		this.ntp_timezone = (byte) (ntp_timezone | 0x80);
	}

	/**
	 * @return the nYear
	 */
	public int getnYear()
	{
		return nYear;
	}

	/**
	 * @param nYear
	 *            the nYear to set
	 */
	public void setnYear(int nYear)
	{
		this.nYear = nYear;
	}

	/**
	 * @return the nMon
	 */
	public byte getnMon()
	{
		return nMon;
	}

	/**
	 * @param nMon
	 *            the nMon to set
	 */
	public void setnMon(byte nMon)
	{
		
		nMon = (byte) (nMon|0x80);
		this.nMon = nMon;
	}
	
	public void setnMon0(byte nMon){
		nMon = (byte)(nMon&0x7F);
		this.nMon = nMon;
	}

	/**
	 * @return the nDay
	 */
	public byte getnDay()
	{
		return nDay;
	}

	/**
	 * @param nDay
	 *            the nDay to set
	 */
	public void setnDay(byte nDay)
	{
		this.nDay = nDay;
	}

	/**
	 * @return the nHour
	 */
	public byte getnHour()
	{
		return nHour;
	}

	/**
	 * @param nHour
	 *            the nHour to set
	 */
	public void setnHour(byte nHour)
	{
		this.nHour = nHour;
	}

	/**
	 * @return the nMin
	 */
	public byte getnMin()
	{
		return nMin;
	}

	/**
	 * @param nMin
	 *            the nMin to set
	 */
	public void setnMin(byte nMin)
	{
		this.nMin = nMin;
	}

	/**
	 * @return the nSec
	 */
	public byte getnSec()
	{
		return nSec;
	}

	/**
	 * @param nSec
	 *            the nSec to set
	 */
	public void setnSec(byte nSec)
	{
		this.nSec = nSec;
	}

	/**
	 * @return the nSdinsert
	 */
	public byte getnSdinsert()
	{
		return nSdinsert;
	}

	/**
	 * @param nSdinsert
	 *            the nSdinsert to set
	 */
	public void setnSdinsert(byte nSdinsert)
	{
		this.nSdinsert = nSdinsert;
	}

	/**
	 * @return the bSchedulesUploadFTP
	 */
	public byte getbSchedulesUploadFTP()
	{
		return bSchedulesUploadFTP;
	}

	/**
	 * @param bSchedulesUploadFTP
	 *            the bSchedulesUploadFTP to set
	 */
	public void setbSchedulesUploadFTP(byte bSchedulesUploadFTP)
	{
		this.bSchedulesUploadFTP = bSchedulesUploadFTP;
	}

	/**
	 * @return the bSchedulesSaveToSD
	 */
	public byte getbSchedulesSaveToSD()
	{
		return bSchedulesSaveToSD;
	}

	/**
	 * @param bSchedulesSaveToSD
	 *            the bSchedulesSaveToSD to set
	 */
	public void setbSchedulesSaveToSD(byte bSchedulesSaveToSD)
	{
		this.bSchedulesSaveToSD = bSchedulesSaveToSD;
	}

	/**
	 * @return the bDeviceRest
	 */
	public byte getbDeviceRest()
	{
		return bDeviceRest;
	}

	/**
	 * @param bDeviceRest
	 *            the bDeviceRest to set
	 */
	public void setbDeviceRest(byte bDeviceRest)
	{
		this.bDeviceRest = bDeviceRest;
	}

	/**
	 * @return the motionenable
	 */
	public byte getMotionenable()
	{
		return motionenable;
	}
	
	public byte getmotioncenable()
	{
		return motioncenable;
	}
	
	/**
	 * @param motionenable
	 *            the motionenable to set
	 */
	public void setMotionenable(byte motionenable)
	{
		this.motionenable = motionenable;
	}
	
	public void setmotioncenable(byte motioncenable)
	{
		this.motioncenable = motioncenable;
	}

	/**
	 * @return the nAlarmAudioPlay
	 */
	public byte getnAlarmAudioPlay()
	{
		return nAlarmAudioPlay;
	}

	/**
	 * @param nAlarmAudioPlay
	 *            the nAlarmAudioPlay to set
	 */
	public void setnAlarmAudioPlay(byte nAlarmAudioPlay)
	{
		this.nAlarmAudioPlay = nAlarmAudioPlay;
	}

	/**
	 * @return the bEnableEmailRcv
	 */
	public byte getbEnableEmailRcv()
	{
		return bEnableEmailRcv;
	}

	/**
	 * @param bEnableEmailRcv
	 *            the bEnableEmailRcv to set
	 */
	public void setbEnableEmailRcv(byte bEnableEmailRcv)
	{
		this.bEnableEmailRcv = bEnableEmailRcv;
	}

	/**
	 * @return the bAttachmentType
	 */
	public byte getbAttachmentType()
	{
		return bAttachmentType;
	}

	/**
	 * @param bAttachmentType
	 *            the bAttachmentType to set
	 */
	public void setbAttachmentType(byte bAttachmentType)
	{
		this.bAttachmentType = bAttachmentType;
	}

	/**
	 * @return the szSMTPReceiver
	 */
	public byte[] getSzSMTPReceiver()
	{
		return szSMTPReceiver;
	}

	/**
	 * @param szSMTPReceiver
	 *            the szSMTPReceiver to set
	 */
	public void setSzSMTPReceiver(byte szSMTPReceiver[])
	{
		this.szSMTPReceiver = szSMTPReceiver;
	}

	/**
	 * @return the bAlarmUploadFTP
	 */
	public byte getbAlarmUploadFTP()
	{
		return bAlarmUploadFTP;
	}

	/**
	 * @param bAlarmUploadFTP
	 *            the bAlarmUploadFTP to set
	 */
	public void setbAlarmUploadFTP(byte bAlarmUploadFTP)
	{
		this.bAlarmUploadFTP = bAlarmUploadFTP;
	}

	/**
	 * @return the bAlarmSaveToSD
	 */
	public byte getbAlarmSaveToSD()
	{
		return bAlarmSaveToSD;
	}

	/**
	 * @param bAlarmSaveToSD
	 *            the bAlarmSaveToSD to set
	 */
	public void setbAlarmSaveToSD(byte bAlarmSaveToSD)
	{
		this.bAlarmSaveToSD = bAlarmSaveToSD;
	}

	/**
	 * @return the bSetFTPSMTP
	 */
	public byte getbSetFTPSMTP()
	{
		return bSetFTPSMTP;
	}

	/**
	 * @param bSetFTPSMTP
	 *            the bSetFTPSMTP to set
	 */
	public void setbSetFTPSMTP(byte bSetFTPSMTP)
	{
		this.bSetFTPSMTP = bSetFTPSMTP;
	}

	/**
	 * @return the servier_ip
	 */
	public byte[] getServier_ip()
	{
		return servier_ip;
	}

	/**
	 * @param servier_ip
	 *            the servier_ip to set
	 */
	public void setServier_ip(byte servier_ip[])
	{
		this.servier_ip = servier_ip;
	}

	/**
	 * @return the username
	 */
	public byte[] getUsername()
	{
		return username;
	}

	/**
	 * @param username
	 *            the username to set
	 */
	public void setUsername(byte username[])
	{
		this.username = username;
	}

	/**
	 * @return the password
	 */
	public byte[] getPassword()
	{
		return password;
	}

	/**
	 * @param password
	 *            the password to set
	 */
	public void setPassword(byte password[])
	{
		this.password = password;
	}

	/**
	 * @return the uPort
	 */
	public int getuPort()
	{
		return uPort;
	}

	/**
	 * @param uPort
	 *            the uPort to set
	 */
	public void setuPort(int uPort)
	{
		this.uPort = uPort;
	}
	
	public void setuDevSPort(int uDevSPort)
	{
		this.uDevSPort = uDevSPort;
	}
	
	
	/**
	 * @return the motionlevel
	 */
	public byte getMotionlevel()
	{
		return motionlevel;
	}

	/**
	 * @param motionlevel
	 *            the motionlevel to set
	 */
	public void setMotionlevel(byte motionlevel)
	{
		this.motionlevel = motionlevel;
	}
	
	public byte getmotioncvalue()
	{
		return motioncvalue;
	}
	
	public String getmotionblock()
	{
		return byteToString(motionblock);
	}
	
	public Schedule[] getAschedule(){
		return aSchedules;
	}
	
	public void setmotionblock(byte motionblock[])
	{
		this.motionblock = motionblock;
	}
	
	public void setASchedule(Schedule[] aSchedules){
		this.aSchedules = aSchedules;
	}
	
	public void setmotioncvalue(byte motioncvalue)
	{
		this.motioncvalue = motioncvalue;
	}
	
	
	@Override
	public boolean equals(Object obj)
	{
		if (!(obj instanceof DeviceLocalInfo))
		{
			return false;
		}
		DeviceLocalInfo o = (DeviceLocalInfo) obj;
		if (this == o)
		{
			return true;
		}

		this.setCmd(nCmd);// ���Ƚ�����
		o.setCmd(nCmd); //

		ByteBuffer buffer = o.toByteBuffer();
		if (buffer.equals(this.toByteBuffer()))
		{
			return true;
		}
		return false;
	}

	@Override
	public Object clone()
	{
		DeviceLocalInfo o = null;
		try
		{
			o = (DeviceLocalInfo) super.clone();
			o.szPacketFlag = (byte[]) szPacketFlag.clone();// ��ʵҲ�ܼ�^_^
			o.szDeviceName = (byte[]) szDeviceName.clone();
			o.szDeviceType = (byte[]) szDeviceType.clone();
			o.szDeviceIP = (byte[]) szDeviceIP.clone();
			o.szDeviceMasK = (byte[]) szDeviceMasK.clone();
			o.szDeviceGateWay = (byte[]) szDeviceGateWay.clone();
			o.szMultiAddr = (byte[]) szMultiAddr.clone();
			o.szMacAddr_LAN = (byte[]) szMacAddr_LAN.clone();
			o.szMacAddr_WIFI =(byte[]) szMacAddr_WIFI.clone();
			o.szRevsered0 = (byte[]) szRevsered0.clone();
			o.szDNS0 = (byte[]) szDNS0.clone();
			o.szDNS1 = (byte[]) szDNS1.clone();
			o.szUserName = (byte[]) szUserName.clone();
			o.szPwd = (byte[]) szPwd.clone();
			o.szCameraVer = (byte[]) szCameraVer.clone();
			o.szWanServerIP = (byte[]) szWanServerIP.clone();
			o.szServerPort = (byte[]) szServerPort.clone();
			o.szCamSerial = (byte[]) szCamSerial.clone();
			o.szTutkID = (byte[]) szTutkID.clone();
			o.szRevsered1 = (byte[]) szRevsered1.clone();
			o.szWiFiIP = (byte[]) szWiFiIP.clone();
			o.szWiFiSSID = (byte[]) szWiFiSSID.clone();
			o.szWiFiPwd = (byte[]) szWiFiPwd.clone();
			o.szWiFiMasK = (byte[]) szWiFiMasK.clone();
			o.szWiFiGateWay = (byte[]) szWiFiGateWay.clone();
			o.szWiFiDNS0 = (byte[]) szWiFiDNS0.clone();
			o.szWiFiDNS1 = (byte[]) szWiFiDNS1.clone();
			o.szNewPwd = (byte[]) szNewPwd.clone();
			o.szRevsered2 = (byte[]) szRevsered2.clone();
			o.setServier_ip((byte[]) getServier_ip().clone());
			o.setUsername((byte[]) getUsername().clone());
			o.setPassword((byte[]) getPassword().clone());
			o.szBindAccont = (byte[]) szBindAccont.clone();
			o.szDevSAddr = (byte[]) szDevSAddr.clone();
			o.setSzSMTPReceiver((byte[]) getSzSMTPReceiver().clone());
			o.motionblock = (byte[]) motionblock.clone();
			o.aSchedules = (Schedule[]) aSchedules.clone();

		} catch (CloneNotSupportedException e)
		{
			e.printStackTrace();
		}
		return o;
	}

}
