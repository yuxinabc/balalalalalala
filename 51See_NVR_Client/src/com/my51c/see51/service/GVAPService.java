//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : GVAPService.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.service;

import android.util.Log;

import com.my51c.see51.common.SystemConfigSp;
import com.my51c.see51.data.AccountInfo;
import com.my51c.see51.data.Device;
import com.my51c.see51.data.DeviceList;
import com.my51c.see51.data.Group;
import com.my51c.see51.protocal.GvapCommand;
import com.my51c.see51.protocal.GvapPackage;
import com.my51c.see51.service.GvapEvent.GvapEventListener;

import java.io.IOException;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

/** 
 * see51������ͨ����. <br> 
 ***** &nbsp;&nbsp;����ʵ����������see51������ͨ�ŵķ�����ͨ��init������ʼ����ͨ��start����������ͨ��stop����ֹͣ��ͨ��release�����ͷ���Դ
 */

/**
 * @author Administrator
 * 
 */
public class GVAPService implements Runnable
{

	final static int REQUEST_TIMEOUT = 10; // ÿ���������ʱʱ��
	final static int CONNECT_TIMEOUT = 10; // ���Ͱ���ʱʱ��
	/*
	final static String USER_SERVER_ADDR[] =
	{ 
		ServerConfig.loginServerAddr
	};
	
	final static int USER_SERVER_PORT = 5590;
	final static String REG_SERVER_ADDR[] =
	{ 
		ServerConfig.regServerAddr
	};

	final static int REG_SERVER_PORT = 5560;
	*/
	private boolean running;
	private Selector selector;
	private Thread runThread;
	private GvapServer userServer;
	private GvapServer regServer;
	private boolean inited = false;
	private AccountInfo usrAccount = null;
	public AccountInfo getUsrAccount() {
		return usrAccount;
	}


	public void setUsrAccount(AccountInfo usrAccount) {
		this.usrAccount = usrAccount;
	}

	private boolean bUserServerLoginOk = false;//no use now, by marshal
	public boolean bNetStatus = false;
	private final String TAG = "GVAPService";

	/**
	 * ��ʼ������. ��ʼ����������Ҫ����Դ��������豸�б������ <br>
	 * 
	 * @param localList
	 *            - �����豸�б���ȡ���Ĺ����豸���������ڸ��б��У�����Ϊnull <br>
	 * @return true -- ��ʼ���ɹ���false--��ʼ��ʧ��
	 */
	public boolean init()
	{
		try
		{
			selector = Selector.open();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
//		String fir = USER_SERVER_ADDR[0];
//		userServer = new GvapServer(USER_SERVER_ADDR, USER_SERVER_PORT); // �û�������������������ע��������õ���ʱ���ٴ���
//		userServer.setRequest_timeout(REQUEST_TIMEOUT);
		startUserServer();
		startRegServer();
		inited = true;
		return true;
	}
	
	
	/**
	 * �����û�������
	 * 
	 * @param ��
	 * @return ��
	 */
	public void startUserServer(){
		if(this.userServer == null){
			
			userServer = new GvapServer(SystemConfigSp.instance().getStrConfig(SystemConfigSp.SysCfgDimension.LOGINSERVERIP), 
										SystemConfigSp.instance().getIntConfig(SystemConfigSp.SysCfgDimension.LOGINSERVERPORT)); // �û�������������������ע��������õ���ʱ���ٴ���
			userServer.setRequest_timeout(REQUEST_TIMEOUT);
		}
	}
	
	/**
	 * ����ע�������
	 * 
	 * @param ��
	 * @return ��
	 */
	public void startRegServer()
	{
		if (this.regServer == null)
		{
			//Log.d(TAG, "new RegisterServer");
			this.regServer = new GvapServer(SystemConfigSp.instance().getStrConfig(SystemConfigSp.SysCfgDimension.REGISTERSERVERIP), 
											SystemConfigSp.instance().getIntConfig(SystemConfigSp.SysCfgDimension.REGISTERSERVERPORT));
			this.regServer.setRequest_timeout(REQUEST_TIMEOUT);
		}
	}

	/**
	 * ��������. �������� <br>
	 * 
	 * @param
	 * @return true --�����ɹ���false--����ʧ��
	 */
	public boolean start()
	{
		if (!inited) // ���û�г�ʼ���򷵻�
		{
			Log.i(TAG, "GVAPServiceδ��ʼ��");
			return false;
		}
		runThread = new Thread(this);//line��658
		runThread.start();
		return true;
	}

	/**
	 * ֹͣ����. ֹͣ���� <br>
	 * 
	 * @param ��
	 * @return ��
	 */
	public void stop()
	{
		this.running = false;
	}

	/**
	 * ��ȡ����״̬ ��ȡ����״̬ <br>
	 * 
	 * @param ��
	 * @return true - �������� false - û������
	 */
	public boolean isRunning()
	{
		return this.running;
	}


	public void setUserServerLoginStatus( boolean bLogin)
	{
		bUserServerLoginOk = bLogin;
		return ;
	}

	/**
	 * �жϳ�ʼ��. �Ƿ��Ѿ���ʼ�� <br>
	 * 
	 * @param
	 * @return true --��ʼ���ɹ���false--��ʼ��ʧ��
	 */
	public boolean isInit()
	{
		return inited;
	}
	
	/**
	 * ����ʼ�� ����ʼ�� <br>
	 * 
	 * @param ��
	 * @return ��
	 */
	public void release()
	{
		stop();
		try
		{
			selector.close();
		} catch (IOException e)
		{
			e.printStackTrace();
		}

		this.userServer.close();
		this.userServer = null;
		if (this.regServer != null)
		{
			this.regServer.close();
		}
		this.regServer = null;
		inited = false;
	}
	
	/**
	 * ����ע�������
	 * 
	 * @param ��
	 * @return ��
	 */
	public void restartRegServer()
	{
		if (this.regServer != null)
		{
			this.regServer.close();
			this.regServer = null;
		}
		startRegServer();
	}
	

	/**
	 * ������е������¼�����
	 */
	public void removeGvapEventListenerAll()
	{
		this.userServer.removeGvapEventListenerAll();
		if (this.regServer != null)
		{
			this.regServer.removeGvapEventListenerAll();
		}
	}

	/**
	 * ע��see51�����¼����� ע��see51�����¼����������ײ����¼���������Ϣ����ʱ������ע��ļ����߶��� <br>
	 * 
	 * @param GvapEventListener
	 *            o - �¼������ߣ������¼��Ķ���
	 * @return ��
	 */
	public void addGvapEventListener(GvapEventListener o)
	{
		this.userServer.addGvapEventListener(o);
		if (this.regServer != null)
		{
			this.regServer.addGvapEventListener(o);
		}
	}

	/**
	 * ע��see51�����¼����� ע��see51�����¼��������������߶Եײ��¼����ٸ���Ȥʱ���ô˽ӿ�ע�������¼�����ڵ�¼����Ժ�ע���Լ�<br>
	 * 
	 * @param GvapEventListener
	 *            o - �¼������ߣ������¼��Ķ���
	 * @return ��
	 */
	public void removeGvapEventListener(GvapEventListener o)
	{
		if(this.userServer != null)
		{
			this.userServer.removeGvapEventListener(o);
		}
		
		if (this.regServer != null)
		{
			this.regServer.removeGvapEventListener(o);
		}
	}

	/**
	 * ��¼ ��¼��see51������
	 * 
	 * @param AccountInfo
	 *            account - ��¼�˻���Ϣ
	 * @return true - ���͵�¼����ɹ���false - ���͵�¼����ʧ��
	 */
	public boolean login(AccountInfo account)
	{
		if (account != null)
		{
			GvapPackage loginPack = new GvapPackage(GvapCommand.CMD_LOGIN);
			loginPack.addParam("username", account.getUsername());
			loginPack.addParam("password", account.getPassword());
			this.usrAccount = account;
			return sendToUserServer(loginPack, true);
		}
		else
		{
			if(this.usrAccount!=null)
			{
				GvapPackage loginPack = new GvapPackage(GvapCommand.CMD_LOGIN);
				loginPack.addParam("username", this.usrAccount.getUsername());
				loginPack.addParam("password", this.usrAccount.getPassword());
				return sendToUserServer(loginPack, true);
			}
		}
		return false;
	}

	/**
	 * ע����¼ ���Ѿ���¼���˺Ŵ�see51������ע���� �����ǰ�����˻���¼�ɹ�����������logout֮����ܼ�����һ�ε�¼������������ܾ���¼
	 * 
	 * @param ��
	 * @return ��
	 */
	public void logout()
	{
		bUserServerLoginOk = false;

		if(userServer != null)
			userServer.close();
	
	}

	/**
	 * ��ȡ�汾�� �ӷ�������ȡ�����б��豸�б�汾��
	 * 
	 * @param ��
	 * @return ��
	 */
	public void getVersions()
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_VERSIONS);
		this.sendToUserServer(pack, true);
	}

	/**
	 * ��ȡ�����б� �ӷ�������ȡ�����б�
	 * 
	 * @param ��
	 * @return ��
	 */
	public void getPublicList()
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_PUBLIST);//param:commandId
		this.sendToUserServer(pack, true);
	}

	/**
	 * ��ȡ�豸�б� ��ȡ��ǰ��¼���˻��µ��豸�б�
	 * 
	 * @param ��
	 * @return ��
	 */
	public void getDeviceList()
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVLIST);
		this.sendToUserServer(pack, true);
		Log.i(TAG, "--��ȡ�豸�б�");
	}

	/**
	 * ��ȡĳ����������豸�б� ��ȡ��ǰ��¼���˻��µ�ĳ��������豸�б�
	 * 
	 * @param groupId
	 *            ���ID
	 * @return ��
	 */
	public void getDeviceList(String groupId)
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVLIST);
		pack.addParam("group-id", groupId);
		pack.setParent_group(groupId);
		this.sendToUserServer(pack, true);
	}

	/**
	 * ��ȡ�豸״̬ ��ȡ�б��е��豸����״̬
	 * 
	 * @param DeviceList
	 *            list - �豸�б�
	 * @return ��
	 */
	public void getDeviceStatus(DeviceList list)
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVSTATUS);
		Group group = list.getParent_group();
		if (group != null)
		{
			String groupId = group.getGroupID();
			pack.setParent_group(groupId);
		}
		synchronized (list)
		{
			for (Device dev : list)
			{
				pack.addParam("device-id", dev.getID());
			}
		}
		this.sendToUserServer(pack, true);
	}

	public void getDeviceStatus(String id)
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVSTATUS);
		pack.addParam("device-id", id);
		this.sendToUserServer(pack, true);
	}

	/**
	 * ��ȡ�豸��Ϣ ��ȡ�б��е��豸����ϸ��Ϣ
	 * 
	 * @param DeviceList
	 *            list - �豸�б�
	 * @return ��
	 */
	public void getDeviceInfo(DeviceList list)
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVINFO);
		Group group = list.getParent_group();
		if (group != null)
		{
			String groupId = group.getGroupID();
			pack.setParent_group(groupId);
		}
		for (Device dev : list)
		{
			pack.addParam("device-id", dev.getID());
		}
		this.sendToUserServer(pack, true);
	}

	/**
	 * ��ȡ����Ϣ ��ȡ���б��е������ϸ��Ϣ
	 * 
	 * @param DeviceList
	 *            list - �豸�б�
	 * @return ��
	 */
	public void getGroupInfo(DeviceList list)
	{
		GvapPackage pack = new GvapPackage(GvapCommand.CMD_GET_DEVINFO);
		Group group = list.getParent_group();
		if (group != null)
		{
			String groupId = group.getGroupID();
			pack.setParent_group(groupId);
		}
		Iterator<Group> groupIterator = list.getIteratorGroup();
		while (groupIterator.hasNext())
		{
			pack.addParam("group-id", groupIterator.next().getGroupID());
		}
		this.sendToUserServer(pack, true);
	}

	/**
	 * ���÷�����û�н����ĵ���ʱ��
	 * 
	 * @param ��
	 * @return ��
	 */
	public void setHeartBeat_expire(int time)
	{
		userServer.setHbEXpire(time);
	}
	
	/**
	 * ע���û� ��ȡ��ǰ��¼�û�����ϸ�˻���Ϣ <b>*��δʵ��*</>
	 * 
	 * @param AccountInfo
	 *            userInfo -- �˻���Ϣ����
	 * @return ��
	 */
	public void register(AccountInfo userInfo)
	{
		GvapPackage gvapPackage = new GvapPackage(GvapCommand.CMD_REGISTER);
		gvapPackage.addParam("username", userInfo.getUsername());
		gvapPackage.addParam("password", userInfo.getPassword());
		sendToRegServer(gvapPackage, true);
	}

	/**
	 * �޸��ǳ� �޸ĵ�ǰ��¼�˻����ǳ� <b>*��δʵ��*</>
	 * 
	 * @param String
	 *            newName --�µ��ǳ�
	 * @return ��
	 */
	public void changeNickName(String newName)
	{

	}

	/**
	 * ���豸 ��ָ���豸��������ǰ�˻���
	 * 
	 * @param AccountInfo
	 *            account - �˻���Ϣ Device dev - �豸
	 * @return ��
	 */
	public void bind(AccountInfo account, Device dev)
	{
		GvapPackage gvapPackage = new GvapPackage(GvapCommand.CMD_BIND);
		gvapPackage.addParam("hid", dev.getID());
		gvapPackage.addParam("username", account.getUsername());
		gvapPackage.addParam("password", account.getPassword());
		sendToRegServer(gvapPackage, true);
	}

	/**
	 * ���豸 ��ָ��ID�󶨵�ָ�����˻�
	 * 
	 * @param account
	 *            �˻���Ϣ
	 * @param id
	 *            �豸ID
	 */
	public void bind(AccountInfo account, String id)
	{
		GvapPackage gvapPackage = new GvapPackage(GvapCommand.CMD_BIND);
		gvapPackage.addParam("hid", id);
		gvapPackage.addParam("username", account.getUsername());
		gvapPackage.addParam("password", account.getPassword());
		sendToRegServer(gvapPackage, true);
	}

	/**
	 * ����� ��ָ���豸�뵱ǰ�˻�������� <b>*��δʵ��*</>
	 * 
	 * @param AccountInfo
	 *            account - ��ǰ�˻� Device dev - �豸
	 * @return ��
	 */
	public void unbind(AccountInfo account, Device dev)
	{
		GvapPackage gvapPackage = new GvapPackage(GvapCommand.CMD_UNBIND);
		gvapPackage.addParam("hid", dev.getID());
		gvapPackage.addParam("username", account.getUsername());
		gvapPackage.addParam("password", account.getPassword());
		sendToRegServer(gvapPackage, true);
	}

	/**
	 * �޸��˻����� �޸ĵ�ǰ�˻����� <b>*��δʵ��*</>
	 * 
	 * @param AccountInfo
	 *            account -- ��Ҫ�޸�������˻���Ϣ String newPswn - �µ�����
	 * @return ��
	 */
	public void changePassword(AccountInfo account, String newPsw)
	{	
		GvapPackage gvapPackage = new GvapPackage(GvapCommand.CMD_UPDATE_USERINFO);
		gvapPackage.addParam("username", account.getUsername());
		gvapPackage.addParam("password", account.getPassword());
		gvapPackage.addParam("password_new", newPsw);
		sendToRegServer(gvapPackage, true);
	}

	/**
	 * �޸��豸���� �޸�ָ���豸���豸���� <b>*��δʵ��*</>
	 * 
	 * @param Deice
	 *            dev - ��Ҫ�޸����Ƶ��豸���� <br>
	 *            String name - �µ�����
	 * @return ��
	 */
	public void changeDevName(String devId, String name, AccountInfo userinfo)
	{
		// TODO ��ȫpackage
		if(devId == null || devId.equals("") || name == null || name.equals("") || userinfo == null)
			return;
		
		GvapPackage cnamePack = new GvapPackage(GvapCommand.CMD_UPDATE_DEVINFO);
		cnamePack.addParam("hid", devId);
		cnamePack.addParam("username", userinfo.getUsername());
		cnamePack.addParam("password", userinfo.getPassword());
		cnamePack.addParam("name", name);
		//cnamePack.addParam("type", "0");
		sendToRegServer(cnamePack, true);
	}
	
	/**����GPS��Ϣ*/
	public void setLocation(String devId, String location, AccountInfo userinfo)
	{
		// TODO ��ȫpackage
		if(devId == null || devId.equals("") || location == null || location.equals("") || userinfo == null){
			Log.i(TAG, "------����GPS��Ϣ:null");
		}else{
			GvapPackage cnamePack = new GvapPackage(GvapCommand.CMD_UPDATE_DEVINFO);
			cnamePack.addParam("hid", devId);
//			cnamePack.addParam("username", userinfo.getUsername());
//			cnamePack.addParam("password", userinfo.getPassword());
			cnamePack.addParam("remark2", location);
			sendToRegServer(cnamePack, true);
		}
	}

	private boolean sendToRegServer(GvapPackage pack, boolean waitForResp)
	{
		if (this.regServer == null)
		{
			//Log.d(TAG, "new RegisterServer");
			this.regServer = new GvapServer(SystemConfigSp.instance().getStrConfig(SystemConfigSp.SysCfgDimension.REGISTERSERVERIP), 
											SystemConfigSp.instance().getIntConfig(SystemConfigSp.SysCfgDimension.REGISTERSERVERPORT));
			this.regServer.setRequest_timeout(REQUEST_TIMEOUT);

			// ������֮��run �̻߳��Զ�����
		}
		return this.regServer.sendPackage(pack, waitForResp);
	}

	private boolean sendToUserServer(GvapPackage pack, boolean waitForResp)
	{
		//Log.d(TAG, "sendToUserServer");
		if(userServer != null)
			return userServer.sendPackage(pack, waitForResp);
		else
			return false;
	}

	
	/**���������Ƿ�����*/
	private boolean checkServer(GvapServer server, int serverType)//1 user server, 2 reg server
	{
		// ����������Ѿ�����������û�����ӣ����Զ�����
		// ���û�д�����ֱ�ӷ���
		if (server == null )
		{
			Log.i(TAG, "serverΪ��");
			bUserServerLoginOk = false;
			return false;
		} 
		
		server.checkUnSendList();
		
		if(!server.isConnect())
		{
			//Log.i(TAG, server.toString()+"δ����" );
		
			if(bNetStatus && selector!= null && selector.isOpen() && !server.open(selector))
			{
				//Log.i(TAG, "GvapServer.openʧ��");
				bUserServerLoginOk = false;
				return false;
			}
			else
			{	
				if(serverType==1)
				{
					//Log.i(TAG, "--checkServer:����������Ѿ�����������û�����ӣ����Զ�����-������������");
					if(this.userServer != null)
					this.userServer.onGvapEvent(GvapEvent.CONNECTION_RESET);//let main activity relogin when socket reconnect
				}
				try
				{
					Thread.sleep(1000);
				} catch (InterruptedException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		else
		{
//			Log.i(TAG, server.toString()+"���ӳɹ�" );
			if(!bUserServerLoginOk)
			{
				//this.userServer.onGvapEvent(GvapEvent.CONNECTION_RESET);//let main activity relogin when socket reconnect
			}
		}
		
		if(bNetStatus)
		{
			// ��鷢���б�����ʱ��
			server.checkSendList();
			server.checkHearBeat();
			server.checkTimeout();//timeout->������ʱ
		}
		return true;
		
	}

	@Override
	public void run()
	{
		//Log.d(TAG, "GVAPService thread started");
		running = true;
		int Time = 5;
		Iterator<SelectionKey> selectedKeys ;
		SelectionKey key = null;
		
		
		while (running)
		{
			// �������������б��������ȴ������б�
			
			if (!checkServer(this.userServer, 1)) // û��������continue
			{
//				Log.i(TAG, "δ���ӷ�����:"+userServer.toString()+"ѭ�����");
//				MainActivity.openNum++;
				if (Time < 250)
				{
					Time = Time + 5;
				}
				try
				{
					int t = Time / 5;
					Thread.sleep(100 * t);
				} catch (InterruptedException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					//��ִ��continue�Ժ�Ĳ��������ص�ѭ����ڼ���ִ�и�ѭ��
			}
		
				
			Time = 5;
			try {
				if(!checkServer(this.regServer,2))
				{
					continue;
				}
			} catch (Exception e) {
				// TODO: handle exception
				restartRegServer();
			}
			
			
			if(!bNetStatus)
			{	
				Log.i(TAG, "���粻ͨ-ѭ�����");
				try {
					Thread.sleep(5000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				continue;
			}
			
			try
			{
				if (selector.select(256) > 0)//selector.select(256)��1.�����256ms,֮�������ѯ  2.return-�ж��ٸ���Ȥ��ͨ���Ѿ�����
				{	
					selectedKeys = selector.selectedKeys().iterator();//����"�¼�����"�����ϱ�����
					synchronized (selectedKeys)
					{
						while (selectedKeys.hasNext())
						{
							key = (SelectionKey) selectedKeys.next();
							selectedKeys.remove();//ʹ�������������ϱ����£�
							if (key.isReadable())
							{
								((GvapServer) key.attachment()).receiveGvapFrame((SocketChannel) key.channel());
							}
						}
					}
				}
			} catch (Exception e)
			{
				// break;
				Log.w(TAG, "Exception");
				e.printStackTrace();
				if(key!=null)
				{
					bUserServerLoginOk = false;
					 key.cancel();
					((GvapServer) key.attachment()).close();
				
				}
			}
		}
		
		if (this.userServer != null)
		{
			this.userServer.close(); // �ر�socket
		}
		if (this.regServer != null)
		{
			this.regServer.close();
		}
		//Log.d(TAG, "thread exit");
		running = false;
	}
	
	public void setOnGvapEvent(GvapEvent e){
		this.userServer.onGvapEvent(e);
	}
	
	public void clearPreSendList(){
		this.userServer.clearpreSendList();
	}
}
