//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : LocalService.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.service;

import com.my51c.see51.common.AppData;
import com.my51c.see51.data.DeviceList;
import com.my51c.see51.data.DeviceLocalInfo;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;

/**
 * LocalService ������ͨ����. <br>
 ***** &nbsp;&nbsp;����ʵ����������ͷ������ͨ�ŵĻ������ܣ���ӵ���Լ����̣߳�ͨ��init������ʼ������߳�һֱ���У�<br>
 ***** ֱ��release������. <br>
 ***** &nbsp;&nbsp;����ӵ��һ���豸�б�����ã��ڳ�ʼ����ʱ���룬 ���������й�����һֱ��̬ά�����б�
 */

public class LocalService implements Runnable
{
	private DeviceList localDevList;
	private DatagramChannel datagramChannel;
	private Selector selector;
	private boolean bInited;
	private boolean bStop;
	private Thread runThread;
	private AppData  appdata;

	final int sndPort = 8628;
	final int rcvPort = 8629;

	final static public int M51GET = 0x56;
	final static public int RESPONDM51GET = 0x57;
	final static public int RESPONDM51GET_3G = 0x58;
	final static public int M51SET = 0x87;
	final static public int M51SET_3G = 0x80;
	final static public int MY51GET_3G = 0x81;
	final static public int RIGHTM51SET = 0x89;
	final static public int WRONGM51SET = 0x93;
	public static final String CMD_GET_FLAG = "HdvsGet";
	public static final String CMD_SET_INFO_FLAG = "HdvsSetInfo";
	public static final String CMD_SET_SUCCESS_FLAG = "hdvsset success";
/***
//old
	#define CMD_GET_FLAG "GosGet"	
	#define CMD_SET_INFO_FLAG "GosSetInfo"	
	#define CMD_SET_SUCCESS_FLAG "gosset succsuss"
//new by marshal
	#define CMD_GET_FLAG "HdvsGet"	
	#define CMD_SET_INFO_FLAG "HdvsSetInfo"	
	#define CMD_SET_SUCCESS_FLAG "hdvsset success"
*/	
	private OnSetDeviceListener mSetDeviceListener;
//	private boolean is3GDevice = false;

	public interface OnSetDeviceListener
	{
		public void onSetDeviceSucess(DeviceLocalInfo devInfo);

		public void onSetDeviceFailed(DeviceLocalInfo devInfo);
	}

	public void setListener(OnSetDeviceListener l)
	{
		mSetDeviceListener = l;
	}

	private String listeningID;

	public void setListenID(String id)
	{
		listeningID = id;
	}

	/**
	 * ��ʼ������. ��ʼ��������ͨ�ŷ��������߳� <br>
	 * 
	 * @param localList
	 *            - �豸�б����������豸���������ڸ��б��У�����Ϊnull <br>
	 * @return ��
	 */
	public void init(DeviceList localList, AppData inData)
	{
		this.localDevList = localList;
		bInited = false;
		runThread = new Thread(this);
		runThread.start();
		appdata = inData;
		
	}

	/**
	 * �жϳ�ʼ���ɹ�����. �жϳ�ʼ���Ƿ�ɹ�. <br>
	 * 
	 * @param ��
	 * <br>
	 * @return ��
	 */
	public Boolean isInit()
	{
		return bInited;
	}

	/**
	 * release ����.
	 * <p>
	 * ֹͣ������ͨ�ŷ���, ֹͣ���е��̣߳��ر�����ӿ�<br>
	 * 
	 * @param ��
	 * @return ��
	 */
	public void release()
	{
		bStop = true;
		try
		{
			runThread.join();
		} catch (InterruptedException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * search ����.
	 * <p>
	 * �����������ؾ�����������ͷ�豸, ���Ѿ����������豸�б���գ����������������ڵ��豸
	 * </p>
	 * <br>
	 * 
	 * @param ��
	 * @return ��
	 */
	public void search()
	{
		DeviceLocalInfo searchPack = new DeviceLocalInfo();
		searchPack.setCmd(M51GET);
		searchPack.setPacketFlag(CMD_GET_FLAG);
		sendPackage(searchPack);
	}
	
	public void search3g(DeviceLocalInfo searchPack )
	{
//		DeviceLocalInfo searchPack = new DeviceLocalInfo();
		searchPack.setCmd(MY51GET_3G);
		searchPack.setPacketFlag(CMD_GET_FLAG);
		searchPack.setDeviceType("3G");
		sendPackage(searchPack);
	}
	
	/**
	 * �����豸����. �����豸����, �������������豸�Ĳ����������������á�����Ƶ�������õ�
	 * 
	 * @param info
	 *            �豸��Ϣ�����豸ԭ����Ϣ�޸���Ҫ�޸ĵĲ��ֺ���
	 * 
	 *            <b>*��δʵ��*</b>
	 */

	
	public void setDeviceParam(DeviceLocalInfo info)
	{
		// DeviceLocalInfo pack = (DeviceLocalInfo) info.clone();
		setListenID(info.getCamSerial());
		info.setCmd(M51SET);
		info.setPacketFlag(CMD_SET_INFO_FLAG);
		sendPackage(info);
	}
	
	public void setDevice3GParam(DeviceLocalInfo info)
	{
		// DeviceLocalInfo pack = (DeviceLocalInfo) info.clone();
		setListenID(info.getCamSerial());
		info.setCmd(M51SET_3G);
		info.setPacketFlag(CMD_SET_INFO_FLAG);
		info.setDeviceType("3G");
		sendPackage(info);
	}
	

	public void rebootDevice(DeviceLocalInfo info)
	{
		// if (info==null) {
		// info = new DeviceLocalInfo();
		// }
		setListenID(info.getCamSerial());
		info.setCmd(M51SET);
		info.setbDeviceRest((byte) 2); // 1,�ָ�����ֵ�������; 2 �����豸
		info.setPacketFlag(CMD_SET_INFO_FLAG);
		sendPackage(info);
	}

	public void setDefaultPara(DeviceLocalInfo info)
	{
		setListenID(info.getCamSerial());
		info.setCmd(M51SET);
		info.setbDeviceRest((byte) 1); // 1,�ָ�����ֵ�������; 2 �����豸
		info.setPacketFlag(CMD_SET_INFO_FLAG);
		sendPackage(info);
		//Log.d("LocalService", "setDefaultPara: " + info.getCamSerial());
	}

	private void OnRecievePackate(ByteBuffer buf, SocketAddress rAddr)
	{
		//Log.d("LocalService", "Received " + buf.limit() + " bytes From " + rAddr.toString());
		DeviceLocalInfo devInfo = new DeviceLocalInfo(buf);
		if (devInfo.getCmd() == RESPONDM51GET || devInfo.getCmd() == RESPONDM51GET_3G)
		{	
			boolean b3gdevice = false; 
			boolean is3GDevice = false;
			if(devInfo.getCmd() == RESPONDM51GET_3G){
				is3GDevice = true;
			}
			
			if(devInfo.getCmd() == RESPONDM51GET)
			{
				String mDevid = devInfo.getCamSerial();
				String strType1 = mDevid.substring(0, 4);
				String strType2 = mDevid.substring(0, 3);
				
				if(strType1.equals("3321") || strType1.equals("3322") 
				   || strType1.equals("3421") || strType1.equals("3422")
				   || strType2.equals("a02") || strType2.equals("a42")
				   || strType2.equals("a82") || strType2.equals("a83")
				   || strType2.equals("a84"))
				{
					b3gdevice = true;
				}
				else
				{
					b3gdevice = false;
				}	
			}
			/*
			List<SelectionDevice>  mylist = appdata.getM_selectdevice();
			boolean bFound = false;
			if(mylist != null)
			{
				for(int i = 0; i < mylist.size(); i++)  
		        {  
					SelectionDevice seldev = (SelectionDevice) mylist.get(i);  
					
					if(seldev.isLocal() == true && seldev.getDeviceid().equals(devInfo.getCamSerial()))
					{
						bFound = true;
						break;
					}
		        }  
			}
			*/
			
			if(b3gdevice)
			{
//				is3GDevice = true;
				search3g(devInfo);
			}
			else
			{
				localDevList.onReceivedMessage(devInfo, rAddr,is3GDevice);
//				is3GDevice = false;
				//Log.d("LocalService", "find deivce" + devInfo.getDeviceName() + " sn: " + devInfo.getCamSerial());
			}
			
		} else if (devInfo.getCmd() == RIGHTM51SET && devInfo.getCamSerial().equals(listeningID))
		{
			//Log.d("LocalService", "RIGHTM51SET  from " + devInfo.getCamSerial());
			//Log.d("LocalService", "listeningID " + listeningID);
			if (mSetDeviceListener != null)
			{
				mSetDeviceListener.onSetDeviceSucess(devInfo);
			}
		} else if (devInfo.getCmd() == WRONGM51SET && devInfo.getCamSerial().equals(listeningID))
		{
			//Log.d("LocalService", "WRONGM51SET  from " + devInfo.getCamSerial());
			//Log.d("LocalService", "listeningID " + listeningID);
			if (mSetDeviceListener != null)
			{
				mSetDeviceListener.onSetDeviceFailed(devInfo);
			}
		}

	}

	@Override
	public void run()
	{

		//Log.d("LocalThread", "I am running");
		bStop = false;
		ByteBuffer byteBuf = ByteBuffer.allocate(1088);
		try
		{
			datagramChannel = DatagramChannel.open();//�����ݱ�ͨ��
			datagramChannel.socket().setReuseAddress(true);//��������ͬһ���˿ڵĽ��̱��붼���� socket.setResuseAddress(true) ����, ����ʹ��һ�����̹ر� Socket��, ��һ�����̵� Socket �ܹ�����������ͬ�˿�.
			datagramChannel.socket().bind(new InetSocketAddress(rcvPort));//�򿪵� DatagramChannel������UDP�˿�"rcvPort"�Ͻ������ݰ�
			
			//Log.d("LocalService", "socket sndbufsize = " + datagramChannel.socket().getSendBufferSize());
			//Log.d("LocalService", "socket rcv = " + datagramChannel.socket().getReceiveBufferSize());
			
			datagramChannel.configureBlocking(false);//ͨ��������ģʽ
			datagramChannel.socket().setBroadcast(true);

			selector = Selector.open();
			datagramChannel.register(selector, SelectionKey.OP_READ);// ע�ᵽselector

			bInited = true;
			localDevList.clear();
			search(); // ����������

			while (!bStop)
			{
				if (selector.select(200) > 0)
				{
					//Log.d("LocalThread", "selector.select(100) > 0");
					for (SelectionKey sk : selector.selectedKeys())
					{
						//Log.d("LocalThread", "sk:selector.selectedKeys()");
						// ɾ�����ڴ����selectionkey
						selector.selectedKeys().remove(sk);
						// �����selectionkey��Ӧ��channel���пɶ�������
						if (sk.isReadable())
						{
							DatagramChannel sc = (DatagramChannel) sk.channel();
							byteBuf.clear();
							SocketAddress sa = sc.receive(byteBuf);
							byteBuf.flip();
							// �����յ�����Ϣ
							//Log.d("LocalThread", "byteBuf.limit() = " + byteBuf.limit());
							if (byteBuf.limit() != 1088)
							{
								continue;
							}
							OnRecievePackate(byteBuf, sa);

							// Ϊ��һ�ζ�ȡ��׼��
							sk.interestOps(SelectionKey.OP_READ);
						}
					}
				}
			}
		} catch (IOException ioe)
		{
			bInited = false;
			ioe.printStackTrace();
			//Log.d("LocalThread", ioe.getMessage());
		}

		//Log.d("LocalThread", "I am stop");
	}

	private boolean sendPackage(DeviceLocalInfo devPackge)
	{
		if (!bInited || datagramChannel == null)
		{
			return false;
		}
		final ByteBuffer bf = devPackge.toByteBuffer();
		Thread thread = new Thread(new Runnable()
		{

			@Override
			public void run()
			{
				// TODO Auto-generated method stub
				try
				{
					datagramChannel.send(bf, new InetSocketAddress("255.255.255.255", sndPort));
				} catch (IOException e)
				{
					e.printStackTrace();
				}
			}
		});

		thread.start();
		return true;
	}

}
